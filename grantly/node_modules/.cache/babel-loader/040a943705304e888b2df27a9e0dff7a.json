{"ast":null,"code":"var _ = require('../helper');\n/* OWASP Special Characters: https://www.owasp.org/index.php/Password_special_characters */\n\n\nvar specialCharacters = [' ', '!', '\"', '#', '\\\\$', '%', '&', '\\'', '\\\\(', '\\\\)', '\\\\*', '\\\\+', ',', '-', '\\\\.', '/', ':', ';', '<', '=', '>', '\\\\?', '@', '\\\\[', '\\\\\\\\', '\\\\]', '\\\\^', '_', '`', '{', '\\\\|', '}', '~'].join('|');\nvar specialCharactersRegexp = new RegExp(specialCharacters);\nmodule.exports = {\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('contains expects expressions to be a non-empty array');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('contains expressions are invalid: An explain and a test function should be provided');\n    }\n\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      items: options.expressions.map(function (expression) {\n        return expression.explain();\n      })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n    var verified = expressions.every(function (expression) {\n      return expression.verified;\n    });\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      verified: verified,\n      items: expressions\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n\n    return options.expressions.every(function (expression) {\n      var result = expression.test(password);\n      return result;\n    });\n  },\n  charsets: {\n    upperCase: {\n      explain: function () {\n        return {\n          message: 'upper case letters (A-Z)',\n          code: 'upperCase'\n        };\n      },\n      test: function (password) {\n        return /[A-Z]/.test(password);\n      }\n    },\n    lowerCase: {\n      explain: function () {\n        return {\n          message: 'lower case letters (a-z)',\n          code: 'lowerCase'\n        };\n      },\n      test: function (password) {\n        return /[a-z]/.test(password);\n      }\n    },\n    specialCharacters: {\n      explain: function () {\n        return {\n          message: 'special characters (e.g. !@#$%^&*)',\n          code: 'specialCharacters'\n        };\n      },\n      test: function (password) {\n        return specialCharactersRegexp.test(password);\n      }\n    },\n    numbers: {\n      explain: function () {\n        return {\n          message: 'numbers (i.e. 0-9)',\n          code: 'numbers'\n        };\n      },\n      test: function (password) {\n        return /\\d/.test(password);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jacksonmccomas/Documents/Lambda/labs/startup-grant-database-fe/grantly/node_modules/password-sheriff/lib/rules/contains.js"],"names":["_","require","specialCharacters","join","specialCharactersRegexp","RegExp","module","exports","validate","options","isObject","Error","isArray","expressions","isEmpty","ok","every","expression","isFunction","explain","test","message","code","items","map","missing","password","explained","verified","assert","result","charsets","upperCase","lowerCase","numbers"],"mappings":"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","sourcesContent":["var _ = require('../helper');\n\n/* OWASP Special Characters: https://www.owasp.org/index.php/Password_special_characters */\nvar specialCharacters = [' ', '!', '\"', '#', '\\\\$', '%', '&', '\\'', '\\\\(', '\\\\)', '\\\\*', '\\\\+', ',', '-', '\\\\.', '/', ':', ';', '<', '=', '>', '\\\\?', '@', '\\\\[', '\\\\\\\\', '\\\\]', '\\\\^', '_','`','{','\\\\|', '}','~'].join('|');\n\nvar specialCharactersRegexp = new RegExp(specialCharacters);\n\nmodule.exports = {\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('contains expects expressions to be a non-empty array');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('contains expressions are invalid: An explain and a test function should be provided');\n    }\n    return true;\n  },\n  explain: function (options) {\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      items: options.expressions.map(function (expression) {\n        return expression.explain();\n      })\n    };\n  },\n  missing: function (options, password) {\n    var expressions = options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n\n    var verified = expressions.every(function (expression) {\n      return expression.verified;\n    });\n\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      verified: verified,\n      items: expressions\n    };\n  },\n  assert: function (options, password) {\n    if (!password) {\n      return false;\n    }\n\n    return options.expressions.every(function (expression) {\n      var result = expression.test(password);\n      return result;\n    });\n  },\n  charsets: {\n    upperCase: {\n      explain: function () { return {\n        message: 'upper case letters (A-Z)',\n        code: 'upperCase'\n      }; },\n      test: function (password) { return /[A-Z]/.test(password); }\n    },\n    lowerCase: {\n      explain: function () { return {\n        message: 'lower case letters (a-z)',\n        code: 'lowerCase'\n      }; },\n      test: function (password) { return /[a-z]/.test(password); }\n    },\n    specialCharacters: {\n      explain: function () { return {\n        message: 'special characters (e.g. !@#$%^&*)',\n        code: 'specialCharacters'\n      }; },\n      test: function (password) { return specialCharactersRegexp.test(password); }\n    },\n    numbers: {\n      explain: function () { return {\n        message: 'numbers (i.e. 0-9)',\n        code: 'numbers'\n      }; },\n      test: function (password) { return /\\d/.test(password); }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}