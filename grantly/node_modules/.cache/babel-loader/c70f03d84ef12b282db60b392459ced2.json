{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { captureException, withScope } from '@sentry/core';\nimport { addExceptionMechanism, addExceptionTypeValue, normalize } from '@sentry/utils';\nvar ignoreOnError = 0;\n/**\n * @hidden\n */\n\nexport function shouldIgnoreOnError() {\n  return ignoreOnError > 0;\n}\n/**\n * @hidden\n */\n\nexport function ignoreNextOnError() {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(function () {\n    ignoreOnError -= 1;\n  });\n}\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\n\nexport function wrap(fn, options, before) {\n  if (options === void 0) {\n    options = {};\n  } // tslint:disable-next-line:strict-type-predicates\n\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    } // If this has already been wrapped in the past, return that wrapped function\n\n\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  var sentryWrapped = function () {\n    var args = Array.prototype.slice.call(arguments); // tslint:disable:no-unsafe-any\n\n    try {\n      // tslint:disable-next-line:strict-type-predicates\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      var wrappedArguments = args.map(function (arg) {\n        return wrap(arg, options);\n      });\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        return fn.handleEvent.apply(this, wrappedArguments);\n      } // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n\n\n      return fn.apply(this, wrappedArguments); // tslint:enable:no-unsafe-any\n    } catch (ex) {\n      ignoreNextOnError();\n      withScope(function (scope) {\n        scope.addEventProcessor(function (event) {\n          var processedEvent = tslib_1.__assign({}, event);\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = tslib_1.__assign({}, processedEvent.extra, {\n            arguments: normalize(args, 3)\n          });\n          return processedEvent;\n        });\n        captureException(ex);\n      });\n      throw ex;\n    }\n  }; // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n\n\n  try {\n    for (var property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // tslint:disable-line:no-empty\n\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped\n  }); // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn\n    }\n  }); // Restore original function name (not all browsers allow that)\n\n  try {\n    var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');\n\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get: function () {\n          return fn.name;\n        }\n      });\n    }\n  } catch (_oO) {\n    /*no-empty*/\n  }\n\n  return sentryWrapped;\n}","map":{"version":3,"sources":["../src/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { captureException, withScope } from '@sentry/core';\nimport { Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue, normalize } from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n): any {\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    // tslint:disable:no-unsafe-any\n    try {\n      // tslint:disable-next-line:strict-type-predicates\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n      // tslint:enable:no-unsafe-any\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: normalize(args, 3),\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // tslint:disable-line:no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n  } catch (_oO) {\n    /*no-empty*/\n  }\n\n  return sentryWrapped;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}