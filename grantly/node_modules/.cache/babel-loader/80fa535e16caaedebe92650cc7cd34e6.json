{"ast":null,"code":"import { FilterTypes } from \"./filterTypes\";\nimport { filterFormState } from '../../components/filter/formState';\nimport { Filters } from \"./Filters\";\nconst initialState = {\n  pristine: true,\n  criteria: filterFormState,\n  grants: []\n};\n\nfunction pristine(filters) {\n  const checkPristine = new Filters(filters);\n  return checkPristine.pristine();\n}\n\nconst filterGrants = (grants, state) => {\n  const filterMethods = new Filters(state.criteria);\n  const newFilters = filterMethods.getFilters();\n  const keys = filterMethods.getKeys();\n  const filteredArray = [];\n  const amountArray = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i] === 'amount') {\n      if (newFilters[keys[i]].length > 0) {\n        for (let values of newFilters[keys[i]]) {\n          const {\n            min,\n            max\n          } = values.values;\n          filterMethods.filter(grants, min, max).forEach(eachGrant => amountArray.push(eachGrant));\n        }\n      }\n    } else {\n      const selectArray = amountArray.length > 0;\n\n      for (let values of newFilters[keys[i]]) {\n        filterMethods.filter(selectArray ? amountArray : grants, keys[i], values.key).forEach(eachGrant => filteredArray.push(eachGrant));\n      }\n    }\n  }\n\n  if (filteredArray.length === 0 && amountArray.length !== 0) {\n    amountArray.forEach(eachGrant => filteredArray.push(eachGrant));\n  } // @ts-ignore\n\n\n  filteredArray.sort((a, b) => a.id > b.id ? 1 : -1);\n  return filterMethods.pristine() ? grants : filteredArray;\n};\n\nexport const filterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FilterTypes.FILTER_CHANGE:\n      return { ...state,\n        criteria: action.payload\n      };\n\n    case FilterTypes.FILTER_RESET:\n      return initialState;\n\n    case FilterTypes.FILTER_GRANT:\n      return { ...state,\n        grants: filterGrants(action.payload, state)\n      };\n\n    case FilterTypes.PRISTINE_CHECK:\n      return { ...state,\n        pristine: pristine(state.criteria)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/jacksonmccomas/Documents/Lambda/labs/startup-grant-database-fe/grantly/src/store/filters/filterReducer.ts"],"names":["FilterTypes","filterFormState","Filters","initialState","pristine","criteria","grants","filters","checkPristine","filterGrants","state","filterMethods","newFilters","getFilters","keys","getKeys","filteredArray","amountArray","i","length","values","min","max","filter","forEach","eachGrant","push","selectArray","key","sort","a","b","id","filterReducer","action","type","FILTER_CHANGE","payload","FILTER_RESET","FILTER_GRANT","PRISTINE_CHECK"],"mappings":"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","sourcesContent":["import {FilterActions, FilterFormState, FilterState, FilterTypes} from \"./filterTypes\";\nimport {filterFormState} from '../../components/filter/formState';\nimport {Grant} from \"../grants/grantTypes\";\nimport {Filters} from \"./Filters\";\n\nconst initialState: FilterState = {\n    pristine: true,\n    criteria: filterFormState,\n    grants: []\n};\n\nfunction pristine(filters: FilterFormState): boolean {\n    const checkPristine = new Filters(filters);\n    return checkPristine.pristine();\n}\n\nconst filterGrants = (grants: Grant[], state: FilterState): Grant[] => {\n    const filterMethods = new Filters(state.criteria);\n    const newFilters = filterMethods.getFilters();\n    const keys = filterMethods.getKeys();\n    const filteredArray: Grant[] = [];\n    const amountArray: Grant[] = [];\n    for (let i = 0; i < keys.length; i++) {\n        if (keys[i] === 'amount') {\n            if (newFilters[keys[i]].length > 0) {\n                for (let values of newFilters[keys[i]]) {\n                    const {min, max} = values.values;\n                    filterMethods.filter(grants, min, max).forEach(eachGrant => amountArray.push(eachGrant));\n                }\n            }\n        } else {\n            const selectArray = amountArray.length > 0;\n            for (let values of newFilters[keys[i]]) {\n                filterMethods.filter(selectArray ? amountArray : grants, keys[i], values.key).forEach(eachGrant => filteredArray.push(eachGrant));\n            }\n        }\n\n    }\n    if (filteredArray.length === 0 && amountArray.length !== 0) {\n        amountArray.forEach(eachGrant => filteredArray.push(eachGrant));\n    }\n    // @ts-ignore\n    filteredArray.sort((a, b) => a.id > b.id ? 1 : -1);\n    return filterMethods.pristine() ? grants : filteredArray\n};\n\nexport const filterReducer = (state = initialState, action: FilterActions): FilterState => {\n    switch (action.type) {\n        case FilterTypes.FILTER_CHANGE:\n            return {...state, criteria: action.payload};\n        case FilterTypes.FILTER_RESET:\n            return initialState;\n        case FilterTypes.FILTER_GRANT:\n            return {...state, grants: filterGrants(action.payload, state)};\n        case FilterTypes.PRISTINE_CHECK:\n            return {...state, pristine: pristine(state.criteria)};\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}