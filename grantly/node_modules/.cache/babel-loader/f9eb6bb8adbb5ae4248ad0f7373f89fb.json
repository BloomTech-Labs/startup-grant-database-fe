{"ast":null,"code":"/** The status of an Span. */\nexport var SpanStatus;\n\n(function (SpanStatus) {\n  /** The operation completed successfully. */\n  SpanStatus[\"Ok\"] = \"ok\";\n  /** Deadline expired before operation could complete. */\n\n  SpanStatus[\"DealineExceeded\"] = \"deadline_exceeded\";\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n\n  SpanStatus[\"Unauthenticated\"] = \"unauthenticated\";\n  /** 403 Forbidden */\n\n  SpanStatus[\"PermissionDenied\"] = \"permission_denied\";\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n\n  SpanStatus[\"NotFound\"] = \"not_found\";\n  /** 429 Too Many Requests */\n\n  SpanStatus[\"ResourceExhausted\"] = \"resource_exhausted\";\n  /** Client specified an invalid argument. 4xx. */\n\n  SpanStatus[\"InvalidArgument\"] = \"invalid_argument\";\n  /** 501 Not Implemented */\n\n  SpanStatus[\"Unimplemented\"] = \"unimplemented\";\n  /** 503 Service Unavailable */\n\n  SpanStatus[\"Unavailable\"] = \"unavailable\";\n  /** Other/generic 5xx. */\n\n  SpanStatus[\"InternalError\"] = \"internal_error\";\n  /** Unknown. Any non-standard HTTP status code. */\n\n  SpanStatus[\"UnknownError\"] = \"unknown_error\";\n  /** The operation was cancelled (typically by the user). */\n\n  SpanStatus[\"Cancelled\"] = \"cancelled\";\n  /** Already exists (409) */\n\n  SpanStatus[\"AlreadyExists\"] = \"already_exists\";\n  /** Operation was rejected because the system is not in a state required for the operation's */\n\n  SpanStatus[\"FailedPrecondition\"] = \"failed_precondition\";\n  /** The operation was aborted, typically due to a concurrency issue. */\n\n  SpanStatus[\"Aborted\"] = \"aborted\";\n  /** Operation was attempted past the valid range. */\n\n  SpanStatus[\"OutOfRange\"] = \"out_of_range\";\n  /** Unrecoverable data loss or corruption */\n\n  SpanStatus[\"DataLoss\"] = \"data_loss\";\n})(SpanStatus || (SpanStatus = {})); // tslint:disable:no-unnecessary-qualifier no-namespace\n\n\n(function (SpanStatus) {\n  /**\n   * Converts a HTTP status code into a {@link SpanStatus}.\n   *\n   * @param httpStatus The HTTP response status code.\n   * @returns The span status or {@link SpanStatus.UnknownError}.\n   */\n  // tslint:disable-next-line:completed-docs\n  function fromHttpCode(httpStatus) {\n    if (httpStatus < 400) {\n      return SpanStatus.Ok;\n    }\n\n    if (httpStatus >= 400 && httpStatus < 500) {\n      switch (httpStatus) {\n        case 401:\n          return SpanStatus.Unauthenticated;\n\n        case 403:\n          return SpanStatus.PermissionDenied;\n\n        case 404:\n          return SpanStatus.NotFound;\n\n        case 409:\n          return SpanStatus.AlreadyExists;\n\n        case 413:\n          return SpanStatus.FailedPrecondition;\n\n        case 429:\n          return SpanStatus.ResourceExhausted;\n\n        default:\n          return SpanStatus.InvalidArgument;\n      }\n    }\n\n    if (httpStatus >= 500 && httpStatus < 600) {\n      switch (httpStatus) {\n        case 501:\n          return SpanStatus.Unimplemented;\n\n        case 503:\n          return SpanStatus.Unavailable;\n\n        case 504:\n          return SpanStatus.DealineExceeded;\n\n        default:\n          return SpanStatus.InternalError;\n      }\n    }\n\n    return SpanStatus.UnknownError;\n  }\n\n  SpanStatus.fromHttpCode = fromHttpCode;\n})(SpanStatus || (SpanStatus = {}));","map":{"version":3,"sources":["../src/span.ts"],"names":[],"mappings":"AAwFA;AACA,OAAA,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;AACpB;AACA,EAAA,UAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA;;AACA,EAAA,UAAA,CAAA,iBAAA,CAAA,GAAA,mBAAA;AACA;;AACA,EAAA,UAAA,CAAA,iBAAA,CAAA,GAAA,iBAAA;AACA;;AACA,EAAA,UAAA,CAAA,kBAAA,CAAA,GAAA,mBAAA;AACA;;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,GAAA,WAAA;AACA;;AACA,EAAA,UAAA,CAAA,mBAAA,CAAA,GAAA,oBAAA;AACA;;AACA,EAAA,UAAA,CAAA,iBAAA,CAAA,GAAA,kBAAA;AACA;;AACA,EAAA,UAAA,CAAA,eAAA,CAAA,GAAA,eAAA;AACA;;AACA,EAAA,UAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACA;;AACA,EAAA,UAAA,CAAA,eAAA,CAAA,GAAA,gBAAA;AACA;;AACA,EAAA,UAAA,CAAA,cAAA,CAAA,GAAA,eAAA;AACA;;AACA,EAAA,UAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA;;AACA,EAAA,UAAA,CAAA,eAAA,CAAA,GAAA,gBAAA;AACA;;AACA,EAAA,UAAA,CAAA,oBAAA,CAAA,GAAA,qBAAA;AACA;;AACA,EAAA,UAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA;;AACA,EAAA,UAAA,CAAA,YAAA,CAAA,GAAA,cAAA;AACA;;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,GAAA,WAAA;AACD,CAnCD,EAAY,UAAU,KAAV,UAAU,GAAA,EAAA,CAAtB,E,CAqCA;;;AACA,CAAA,UAAiB,UAAjB,EAA2B;AACzB;;;;;;AAMA;AACA,WAAgB,YAAhB,CAA6B,UAA7B,EAA+C;AAC7C,QAAI,UAAU,GAAG,GAAjB,EAAsB;AACpB,aAAO,UAAU,CAAC,EAAlB;AACD;;AAED,QAAI,UAAU,IAAI,GAAd,IAAqB,UAAU,GAAG,GAAtC,EAA2C;AACzC,cAAQ,UAAR;AACE,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,eAAlB;;AACF,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,gBAAlB;;AACF,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,QAAlB;;AACF,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,aAAlB;;AACF,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,kBAAlB;;AACF,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,iBAAlB;;AACF;AACE,iBAAO,UAAU,CAAC,eAAlB;AAdJ;AAgBD;;AAED,QAAI,UAAU,IAAI,GAAd,IAAqB,UAAU,GAAG,GAAtC,EAA2C;AACzC,cAAQ,UAAR;AACE,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,aAAlB;;AACF,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,WAAlB;;AACF,aAAK,GAAL;AACE,iBAAO,UAAU,CAAC,eAAlB;;AACF;AACE,iBAAO,UAAU,CAAC,aAAlB;AARJ;AAUD;;AAED,WAAO,UAAU,CAAC,YAAlB;AACD;;AAtCe,EAAA,UAAA,CAAA,YAAA,GAAY,YAAZ;AAuCjB,CA/CD,EAAiB,UAAU,KAAV,UAAU,GAAA,EAAA,CAA3B","sourcesContent":["/** Span holding trace_id, span_id */\nexport interface Span {\n  /** Sets the finish timestamp on the current span and sends it if it was a transaction */\n  finish(useLastSpanTimestamp?: boolean): string | undefined;\n  /** Return a traceparent compatible header string */\n  toTraceparent(): string;\n  /** Convert the object to JSON for w. spans array info only */\n  getTraceContext(): object;\n  /** Convert the object to JSON */\n  toJSON(): object;\n\n  /**\n   * Sets the tag attribute on the current span\n   * @param key Tag key\n   * @param value Tag value\n   */\n  setTag(key: string, value: string): this;\n\n  /**\n   * Sets the data attribute on the current span\n   * @param key Data key\n   * @param value Data value\n   */\n  setData(key: string, value: any): this;\n\n  /**\n   * Sets the status attribute on the current span\n   * @param status http code used to set the status\n   */\n  setStatus(status: SpanStatus): this;\n\n  /**\n   * Sets the status attribute on the current span based on the http code\n   * @param httpStatus http code used to set the status\n   */\n  setHttpStatus(httpStatus: number): this;\n\n  /**\n   * Determines whether span was successful (HTTP200)\n   */\n  isSuccess(): boolean;\n}\n\n/** Interface holder all properties that can be set on a Span on creation. */\nexport interface SpanContext {\n  /**\n   * Description of the Span.\n   */\n  description?: string;\n  /**\n   * Operation of the Span.\n   */\n  op?: string;\n  /**\n   * Completion status of the Span.\n   */\n  status?: SpanStatus;\n  /**\n   * Parent Span ID\n   */\n  parentSpanId?: string;\n  /**\n   * Has the sampling decision been made?\n   */\n  sampled?: boolean;\n  /**\n   * Span ID\n   */\n  spanId?: string;\n  /**\n   * Trace ID\n   */\n  traceId?: string;\n  /**\n   * Transaction of the Span.\n   */\n  transaction?: string;\n  /**\n   * Tags of the Span.\n   */\n  tags?: { [key: string]: string };\n\n  /**\n   * Data of the Span.\n   */\n  data?: { [key: string]: any };\n}\n\n/** The status of an Span. */\nexport enum SpanStatus {\n  /** The operation completed successfully. */\n  Ok = 'ok',\n  /** Deadline expired before operation could complete. */\n  DealineExceeded = 'deadline_exceeded',\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  Unauthenticated = 'unauthenticated',\n  /** 403 Forbidden */\n  PermissionDenied = 'permission_denied',\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  NotFound = 'not_found',\n  /** 429 Too Many Requests */\n  ResourceExhausted = 'resource_exhausted',\n  /** Client specified an invalid argument. 4xx. */\n  InvalidArgument = 'invalid_argument',\n  /** 501 Not Implemented */\n  Unimplemented = 'unimplemented',\n  /** 503 Service Unavailable */\n  Unavailable = 'unavailable',\n  /** Other/generic 5xx. */\n  InternalError = 'internal_error',\n  /** Unknown. Any non-standard HTTP status code. */\n  UnknownError = 'unknown_error',\n  /** The operation was cancelled (typically by the user). */\n  Cancelled = 'cancelled',\n  /** Already exists (409) */\n  AlreadyExists = 'already_exists',\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  FailedPrecondition = 'failed_precondition',\n  /** The operation was aborted, typically due to a concurrency issue. */\n  Aborted = 'aborted',\n  /** Operation was attempted past the valid range. */\n  OutOfRange = 'out_of_range',\n  /** Unrecoverable data loss or corruption */\n  DataLoss = 'data_loss',\n}\n\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace SpanStatus {\n  /**\n   * Converts a HTTP status code into a {@link SpanStatus}.\n   *\n   * @param httpStatus The HTTP response status code.\n   * @returns The span status or {@link SpanStatus.UnknownError}.\n   */\n  // tslint:disable-next-line:completed-docs\n  export function fromHttpCode(httpStatus: number): SpanStatus {\n    if (httpStatus < 400) {\n      return SpanStatus.Ok;\n    }\n\n    if (httpStatus >= 400 && httpStatus < 500) {\n      switch (httpStatus) {\n        case 401:\n          return SpanStatus.Unauthenticated;\n        case 403:\n          return SpanStatus.PermissionDenied;\n        case 404:\n          return SpanStatus.NotFound;\n        case 409:\n          return SpanStatus.AlreadyExists;\n        case 413:\n          return SpanStatus.FailedPrecondition;\n        case 429:\n          return SpanStatus.ResourceExhausted;\n        default:\n          return SpanStatus.InvalidArgument;\n      }\n    }\n\n    if (httpStatus >= 500 && httpStatus < 600) {\n      switch (httpStatus) {\n        case 501:\n          return SpanStatus.Unimplemented;\n        case 503:\n          return SpanStatus.Unavailable;\n        case 504:\n          return SpanStatus.DealineExceeded;\n        default:\n          return SpanStatus.InternalError;\n      }\n    }\n\n    return SpanStatus.UnknownError;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}