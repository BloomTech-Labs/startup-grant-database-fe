{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils';\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n */\n\nexport function initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    logger.enable();\n  }\n\n  getCurrentHub().bindClient(new clientClass(options));\n}","map":{"version":3,"sources":["../src/sdk.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAA8B,aAA9B;AAEA,SAAS,MAAT,QAAuB,eAAvB;AAKA;;;;;;;;AAOA,OAAM,SAAU,WAAV,CAA2D,WAA3D,EAA2F,OAA3F,EAAqG;AACzG,MAAI,OAAO,CAAC,KAAR,KAAkB,IAAtB,EAA4B;AAC1B,IAAA,MAAM,CAAC,MAAP;AACD;;AACD,EAAA,aAAa,GAAG,UAAhB,CAA2B,IAAI,WAAJ,CAAgB,OAAhB,CAA3B;AACD","sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instanciate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  getCurrentHub().bindClient(new clientClass(options));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}