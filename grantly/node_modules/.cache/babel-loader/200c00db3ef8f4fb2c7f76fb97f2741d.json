{"ast":null,"code":"export const createReducer = (initialState, fnMap) => (state = initialState, {\n  type,\n  payload\n}) => {\n  const handler = fnMap[type];\n  return handler ? handler(state, payload) : state;\n};","map":{"version":3,"sources":["/Users/jacksonmccomas/Documents/Lambda/labs/startup-grant-database-fe/grantly/src/store/utils/createReducer.ts"],"names":["createReducer","initialState","fnMap","state","type","payload","handler"],"mappings":"AAQA,OAAO,MAAMA,aAA4B,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyB,CAACC,KAAK,GAAGF,YAAT,EAAuB;AAACG,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAvB,KAA2C;AAC5G,QAAMC,OAAO,GAAGJ,KAAK,CAACE,IAAD,CAArB;AACA,SAAOE,OAAO,GAAGA,OAAO,CAACH,KAAD,EAAQE,OAAR,CAAV,GAA6BF,KAA3C;AACH,CAHM","sourcesContent":["import {Reducer} from \"redux\";\n\ninterface FunctionMap {\n    [key: string]: any\n}\n\ntype CreateReducer<S = any, F extends FunctionMap = any> = (state: S, fnMap: F) => Reducer;\n\nexport const createReducer: CreateReducer = (initialState, fnMap) => (state = initialState, {type, payload}) => {\n    const handler = fnMap[type];\n    return handler ? handler(state, payload) : state;\n};\n"]},"metadata":{},"sourceType":"module"}