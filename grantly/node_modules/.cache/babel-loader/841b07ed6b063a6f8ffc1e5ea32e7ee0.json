{"ast":null,"code":"var charsets = require('./lib/rules/contains').charsets;\n\nvar upperCase = charsets.upperCase;\nvar lowerCase = charsets.lowerCase;\nvar numbers = charsets.numbers;\nvar specialCharacters = charsets.specialCharacters;\n\nvar PasswordPolicy = require('./lib/policy');\n\nvar none = new PasswordPolicy({\n  length: {\n    minLength: 1\n  }\n});\nvar low = new PasswordPolicy({\n  length: {\n    minLength: 6\n  }\n});\nvar fair = new PasswordPolicy({\n  length: {\n    minLength: 8\n  },\n  contains: {\n    expressions: [lowerCase, upperCase, numbers]\n  }\n});\nvar good = new PasswordPolicy({\n  length: {\n    minLength: 8\n  },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  }\n});\nvar excellent = new PasswordPolicy({\n  length: {\n    minLength: 10\n  },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  },\n  identicalChars: {\n    max: 2\n  }\n});\nvar policiesByName = {\n  none: none,\n  low: low,\n  fair: fair,\n  good: good,\n  excellent: excellent\n};\n/**\n * Creates a password policy.\n *\n * @param {String} policyName Name of policy to use.\n */\n\nmodule.exports = function (policyName) {\n  var policy = policiesByName[policyName] || policiesByName.none;\n  return {\n    /**\n     * Checks that a password meets this policy\n     *\n     * @method check\n     * @param {String} password\n     */\n    check: function (password) {\n      return policy.check(password);\n    },\n\n    /**\n     * @method assert\n     * Asserts that a passord meets this policy else throws an exception.\n     *\n     * @param {String} password\n     */\n    assert: function (password) {\n      return policy.assert(password);\n    },\n    missing: function (password) {\n      return policy.missing(password);\n    },\n    missingAsMarkdown: function (password) {\n      return policy.missingAsMarkdown(password);\n    },\n    explain: function () {\n      return policy.explain();\n    },\n\n    /**\n     * Friendly string representation of the policy\n     * @method toString\n     */\n    toString: function () {\n      return policy.toString();\n    }\n  };\n};\n\nmodule.exports.PasswordPolicy = PasswordPolicy;\nmodule.exports.charsets = charsets; // module.exports.rulesToApply = rulesToApply;","map":{"version":3,"sources":["/Users/jacksonmccomas/Documents/Lambda/labs/startup-grant-database-fe/grantly/node_modules/password-sheriff/index.js"],"names":["charsets","require","upperCase","lowerCase","numbers","specialCharacters","PasswordPolicy","none","length","minLength","low","fair","contains","expressions","good","containsAtLeast","atLeast","excellent","identicalChars","max","policiesByName","module","exports","policyName","policy","check","password","assert","missing","missingAsMarkdown","explain","toString"],"mappings":"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","sourcesContent":["\nvar charsets = require('./lib/rules/contains').charsets;\n\nvar upperCase         = charsets.upperCase;\nvar lowerCase         = charsets.lowerCase;\nvar numbers           = charsets.numbers;\nvar specialCharacters = charsets.specialCharacters;\n\nvar PasswordPolicy = require('./lib/policy');\n\nvar none =  new PasswordPolicy({\n  length: { minLength: 1 }\n});\n\nvar low = new PasswordPolicy({\n  length: { minLength: 6 }\n});\n\nvar fair = new PasswordPolicy({\n  length: { minLength: 8 },\n  contains: {\n    expressions: [lowerCase, upperCase, numbers]\n  }\n});\n\nvar good = new PasswordPolicy({\n  length: { minLength: 8 },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  }\n});\n\nvar excellent = new PasswordPolicy({\n  length: { minLength: 10 },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  },\n  identicalChars: { max: 2 }\n});\n\nvar policiesByName = {\n  none:       none,\n  low:        low,\n  fair:       fair,\n  good:       good,\n  excellent:  excellent\n};\n\n/**\n * Creates a password policy.\n *\n * @param {String} policyName Name of policy to use.\n */\nmodule.exports = function (policyName) {\n  var policy = policiesByName[policyName] || policiesByName.none;\n\n  return {\n    /**\n     * Checks that a password meets this policy\n     *\n     * @method check\n     * @param {String} password\n     */\n    check: function (password) {\n      return policy.check(password);\n    },\n    /**\n     * @method assert\n     * Asserts that a passord meets this policy else throws an exception.\n     *\n     * @param {String} password\n     */\n    assert: function (password) {\n      return policy.assert(password);\n    },\n\n    missing: function (password) {\n      return policy.missing(password);\n    },\n\n    missingAsMarkdown: function (password) {\n      return policy.missingAsMarkdown(password);\n    },\n\n    explain: function () {\n      return policy.explain();\n    },\n\n    /**\n     * Friendly string representation of the policy\n     * @method toString\n     */\n    toString: function () {\n      return policy.toString();\n    }\n  };\n};\n\nmodule.exports.PasswordPolicy = PasswordPolicy;\n\nmodule.exports.charsets = charsets;\n\n// module.exports.rulesToApply = rulesToApply;\n"]},"metadata":{},"sourceType":"script"}