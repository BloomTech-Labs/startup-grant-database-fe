{"ast":null,"code":"import { FilterTypes } from \"./filterTypes\";\nimport { filterFormState } from '../../components/filter/formState';\nconst initialState = {\n  pristine: true,\n  criteria: filterFormState,\n  grants: []\n};\n\nfunction typedKeys(o) {\n  return Object.keys(o);\n}\n\nfunction criteriaObject(state) {\n  const objectKeys = typedKeys(state.criteria);\n  return objectKeys.map(eachKey => {\n    // @ts-ignore\n    return {\n      [eachKey]: state.criteria[eachKey].filter(item => item.checked)\n    };\n  });\n}\n\nfunction pristine(filters) {\n  for (let i = 0; i < 4; i++) {\n    const checkArray = Object.values(filters[i])[0];\n\n    if (checkArray.length > 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction filterGrants(grants, state) {\n  const checkFilters = criteriaObject(state);\n  /* checkFilters is an array where the keys are indexed\n      0 = amount\n      1 = geographic\n      2 = domain areas\n      3 = admin filters\n   */\n\n  const filteredArray = [];\n  const amountArray = [];\n\n  for (let i = 0; i < 4; i++) {\n    const currentFilterArray = Object.values(checkFilters[i])[0];\n    const currentKey = Object.keys(checkFilters[i])[0];\n\n    if (i === 0) {\n      if (currentFilterArray.length > 0) {\n        for (let index = 0; index < currentFilterArray.length; index++) {\n          const {\n            min,\n            max\n          } = currentFilterArray[index].values;\n\n          if (!min) {\n            grants.filter(grant => grant.amount < max).forEach(eachGrant => amountArray.push(eachGrant));\n          } else if (!max) {\n            grants.filter(grant => grant.amount > min).forEach(eachGrant => amountArray.push(eachGrant));\n          } else {\n            grants.filter(grant => grant.amount >= min && grant.amount <= max).forEach(eachGrant => amountArray.push(eachGrant));\n          }\n        }\n      }\n    } else {\n      const selectFilters = amountArray.length !== 0;\n\n      for (let index = 0; index < currentFilterArray.length; index++) {\n        if (selectFilters) {\n          // @ts-ignore\n          amountArray.filter(grant => grant[currentKey] === currentFilterArray[index].key).forEach(eachGrant => filteredArray.push(eachGrant));\n        } else {\n          // @ts-ignore\n          grants.filter(grant => grant[currentKey] === currentFilterArray[0].key).forEach(eachGrant => filteredArray.push(eachGrant));\n        }\n      }\n    }\n  }\n\n  if (filteredArray.length === 0 && amountArray.length !== 0) {\n    amountArray.forEach(eachGrant => filteredArray.push(eachGrant));\n  }\n\n  return pristine(checkFilters) ? grants : filteredArray;\n}\n\nexport const filterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FilterTypes.FILTER_CHANGE:\n      return { ...state,\n        criteria: action.payload\n      };\n\n    case FilterTypes.FILTER_RESET:\n      return initialState;\n\n    case FilterTypes.FILTER_GRANT:\n      return { ...state,\n        grants: filterGrants(action.payload, state)\n      };\n\n    case FilterTypes.PRISTINE_CHECK:\n      return { ...state,\n        pristine: pristine(criteriaObject(state))\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/jacksonmccomas/Documents/Lambda/labs/startup-grant-database-fe/grantly/src/store/filters/filterReducer.ts"],"names":["FilterTypes","filterFormState","initialState","pristine","criteria","grants","typedKeys","o","Object","keys","criteriaObject","state","objectKeys","map","eachKey","filter","item","checked","filters","i","checkArray","values","length","filterGrants","checkFilters","filteredArray","amountArray","currentFilterArray","currentKey","index","min","max","grant","amount","forEach","eachGrant","push","selectFilters","key","filterReducer","action","type","FILTER_CHANGE","payload","FILTER_RESET","FILTER_GRANT","PRISTINE_CHECK"],"mappings":"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","sourcesContent":["import {FilterActions, Filters, FilterState, FilterTypes, KeyValuePair} from \"./filterTypes\";\nimport {filterFormState} from '../../components/filter/formState';\nimport {Grant} from \"../grants/grantTypes\";\n\nconst initialState: FilterState = {\n    pristine: true,\n    criteria: filterFormState,\n    grants: []\n};\n\nfunction typedKeys<T>(o: T): (keyof T)[] {\n    return Object.keys(o) as (keyof T)[];\n}\n\nfunction criteriaObject(state: FilterState): Filters[] {\n    const objectKeys = typedKeys<Filters>(state.criteria);\n    return objectKeys.map((eachKey: string): Filters => {\n        // @ts-ignore\n        return {[eachKey]: state.criteria[eachKey].filter((item: KeyValuePair) => item.checked)};\n    });\n}\n\nfunction pristine(filters: Filters[]): boolean {\n    for (let i=0; i < 4; i++) {\n        const checkArray = Object.values(filters[i])[0];\n        if (checkArray.length > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction filterGrants(grants: Grant[], state: FilterState): Grant[] {\n    const checkFilters = criteriaObject(state);\n\n    /* checkFilters is an array where the keys are indexed\n        0 = amount\n        1 = geographic\n        2 = domain areas\n        3 = admin filters\n     */\n    const filteredArray: Grant[] = [];\n    const amountArray: Grant[] = [];\n    for (let i = 0; i < 4; i++) {\n        const currentFilterArray = Object.values(checkFilters[i])[0];\n        const currentKey = Object.keys(checkFilters[i])[0];\n        if (i === 0) {\n            if (currentFilterArray.length > 0) {\n                for (let index = 0; index < currentFilterArray.length; index++) {\n                    const {min, max} = currentFilterArray[index].values;\n                    if (!min) {\n                        grants.filter(grant => grant.amount < max).forEach(eachGrant => amountArray.push(eachGrant));\n                    } else if (!max) {\n                        grants.filter(grant => grant.amount > min).forEach(eachGrant => amountArray.push(eachGrant));\n                    } else {\n                        grants.filter(grant => grant.amount >= min && grant.amount <= max).forEach(eachGrant => amountArray.push(eachGrant));\n                    }\n                }\n            }\n        } else {\n            const selectFilters = amountArray.length !== 0;\n            for (let index = 0; index < currentFilterArray.length; index++) {\n                if (selectFilters) {\n                    // @ts-ignore\n                    amountArray.filter(grant => grant[currentKey] === currentFilterArray[index].key).forEach(eachGrant => filteredArray.push(eachGrant));\n                } else {\n                    // @ts-ignore\n                    grants.filter(grant => grant[currentKey] === currentFilterArray[0].key).forEach(eachGrant => filteredArray.push(eachGrant));\n                }\n            }\n        }\n    }\n    if (filteredArray.length === 0 && amountArray.length !== 0) {\n        amountArray.forEach(eachGrant => filteredArray.push(eachGrant));\n    }\n    return pristine(checkFilters) ? grants : filteredArray;\n}\n\nexport const filterReducer = (state = initialState, action: FilterActions): FilterState => {\n    switch (action.type) {\n        case FilterTypes.FILTER_CHANGE:\n            return {...state, criteria: action.payload};\n        case FilterTypes.FILTER_RESET:\n            return initialState;\n        case FilterTypes.FILTER_GRANT:\n            return {...state, grants: filterGrants(action.payload, state)};\n        case FilterTypes.PRISTINE_CHECK:\n            return {...state, pristine: pristine(criteriaObject(state))};\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}