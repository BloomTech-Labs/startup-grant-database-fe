{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Dsn, isPrimitive, isThenable, logger, SyncPromise, truncate, uuid4 } from '@sentry/utils';\nimport { setupIntegrations } from './integration';\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\n\nvar BaseClient =\n/** @class */\nfunction () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  function BaseClient(backendClass, options) {\n    /** Array of used integrations. */\n    this._integrations = {};\n    /** Is the client still processing a call? */\n\n    this._processing = false;\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureException = function (exception, hint, scope) {\n    var _this = this;\n\n    var eventId = hint && hint.event_id;\n    this._processing = true;\n\n    this._getBackend().eventFromException(exception, hint).then(function (event) {\n      return _this._processEvent(event, hint, scope);\n    }).then(function (finalEvent) {\n      // We need to check for finalEvent in case beforeSend returned null\n      eventId = finalEvent && finalEvent.event_id;\n      _this._processing = false;\n    }).then(null, function (reason) {\n      logger.error(reason);\n      _this._processing = false;\n    });\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n    var _this = this;\n\n    var eventId = hint && hint.event_id;\n    this._processing = true;\n    var promisedEvent = isPrimitive(message) ? this._getBackend().eventFromMessage(\"\" + message, level, hint) : this._getBackend().eventFromException(message, hint);\n    promisedEvent.then(function (event) {\n      return _this._processEvent(event, hint, scope);\n    }).then(function (finalEvent) {\n      // We need to check for finalEvent in case beforeSend returned null\n      eventId = finalEvent && finalEvent.event_id;\n      _this._processing = false;\n    }).then(null, function (reason) {\n      logger.error(reason);\n      _this._processing = false;\n    });\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.captureEvent = function (event, hint, scope) {\n    var _this = this;\n\n    var eventId = hint && hint.event_id;\n    this._processing = true;\n\n    this._processEvent(event, hint, scope).then(function (finalEvent) {\n      // We need to check for finalEvent in case beforeSend returned null\n      eventId = finalEvent && finalEvent.event_id;\n      _this._processing = false;\n    }).then(null, function (reason) {\n      logger.error(reason);\n      _this._processing = false;\n    });\n\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getDsn = function () {\n    return this._dsn;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getOptions = function () {\n    return this._options;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.flush = function (timeout) {\n    var _this = this;\n\n    return this._isClientProcessing(timeout).then(function (status) {\n      clearInterval(status.interval);\n      return _this._getBackend().getTransport().close(timeout).then(function (transportFlushed) {\n        return status.ready && transportFlushed;\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.close = function (timeout) {\n    var _this = this;\n\n    return this.flush(timeout).then(function (result) {\n      _this.getOptions().enabled = false;\n      return result;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getIntegrations = function () {\n    return this._integrations || {};\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseClient.prototype.getIntegration = function (integration) {\n    try {\n      return this._integrations[integration.id] || null;\n    } catch (_oO) {\n      logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n      return null;\n    }\n  };\n  /** Waits for the client to be done with processing. */\n\n\n  BaseClient.prototype._isClientProcessing = function (timeout) {\n    var _this = this;\n\n    return new SyncPromise(function (resolve) {\n      var ticked = 0;\n      var tick = 1;\n      var interval = 0;\n      clearInterval(interval);\n      interval = setInterval(function () {\n        if (!_this._processing) {\n          resolve({\n            interval: interval,\n            ready: true\n          });\n        } else {\n          ticked += tick;\n\n          if (timeout && ticked >= timeout) {\n            resolve({\n              interval: interval,\n              ready: false\n            });\n          }\n        }\n      }, tick);\n    });\n  };\n  /** Returns the current backend. */\n\n\n  BaseClient.prototype._getBackend = function () {\n    return this._backend;\n  };\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n\n\n  BaseClient.prototype._isEnabled = function () {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  };\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n\n\n  BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n    var _a = this.getOptions(),\n        environment = _a.environment,\n        release = _a.release,\n        dist = _a.dist,\n        _b = _a.maxValueLength,\n        maxValueLength = _b === void 0 ? 250 : _b;\n\n    var prepared = tslib_1.__assign({}, event);\n\n    if (prepared.environment === undefined && environment !== undefined) {\n      prepared.environment = environment;\n    }\n\n    if (prepared.release === undefined && release !== undefined) {\n      prepared.release = release;\n    }\n\n    if (prepared.dist === undefined && dist !== undefined) {\n      prepared.dist = dist;\n    }\n\n    if (prepared.message) {\n      prepared.message = truncate(prepared.message, maxValueLength);\n    }\n\n    var exception = prepared.exception && prepared.exception.values && prepared.exception.values[0];\n\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    var request = prepared.request;\n\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n\n    if (prepared.event_id === undefined) {\n      prepared.event_id = hint && hint.event_id ? hint.event_id : uuid4();\n    }\n\n    this._addIntegrations(prepared.sdk); // We prepare the result here with a resolved Event.\n\n\n    var result = SyncPromise.resolve(prepared); // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n\n    if (scope) {\n      // In case we have a hub we reassign it.\n      result = scope.applyToEvent(prepared, hint);\n    }\n\n    return result;\n  };\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n\n\n  BaseClient.prototype._addIntegrations = function (sdkInfo) {\n    var integrationsArray = Object.keys(this._integrations);\n\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  };\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n\n\n  BaseClient.prototype._processEvent = function (event, hint, scope) {\n    var _this = this;\n\n    var _a = this.getOptions(),\n        beforeSend = _a.beforeSend,\n        sampleRate = _a.sampleRate;\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject('SDK not enabled, will not send event.');\n    } // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n\n\n    if (typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject('This event has been sampled, will not send event.');\n    }\n\n    return new SyncPromise(function (resolve, reject) {\n      _this._prepareEvent(event, scope, hint).then(function (prepared) {\n        if (prepared === null) {\n          reject('An event processor returned null, will not send event.');\n          return;\n        }\n\n        var finalEvent = prepared;\n\n        try {\n          var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n\n          if (isInternalException || !beforeSend) {\n            _this._getBackend().sendEvent(finalEvent);\n\n            resolve(finalEvent);\n            return;\n          }\n\n          var beforeSendResult = beforeSend(prepared, hint); // tslint:disable-next-line:strict-type-predicates\n\n          if (typeof beforeSendResult === 'undefined') {\n            logger.error('`beforeSend` method has to return `null` or a valid event.');\n          } else if (isThenable(beforeSendResult)) {\n            _this._handleAsyncBeforeSend(beforeSendResult, resolve, reject);\n          } else {\n            finalEvent = beforeSendResult;\n\n            if (finalEvent === null) {\n              logger.log('`beforeSend` returned `null`, will not send event.');\n              resolve(null);\n              return;\n            } // From here on we are really async\n\n\n            _this._getBackend().sendEvent(finalEvent);\n\n            resolve(finalEvent);\n          }\n        } catch (exception) {\n          _this.captureException(exception, {\n            data: {\n              __sentry__: true\n            },\n            originalException: exception\n          });\n\n          reject('`beforeSend` threw an error, will not send event.');\n        }\n      }).then(null, function () {\n        reject('`beforeSend` threw an error, will not send event.');\n      });\n    });\n  };\n  /**\n   * Resolves before send Promise and calls resolve/reject on parent SyncPromise.\n   */\n\n\n  BaseClient.prototype._handleAsyncBeforeSend = function (beforeSend, resolve, reject) {\n    var _this = this;\n\n    beforeSend.then(function (processedEvent) {\n      if (processedEvent === null) {\n        reject('`beforeSend` returned `null`, will not send event.');\n        return;\n      } // From here on we are really async\n\n\n      _this._getBackend().sendEvent(processedEvent);\n\n      resolve(processedEvent);\n    }).then(null, function (e) {\n      reject(\"beforeSend rejected with \" + e);\n    });\n  };\n\n  return BaseClient;\n}();\n\nexport { BaseClient };","map":{"version":3,"sources":["../src/baseclient.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scope } from '@sentry/hub';\nimport { Client, Event, EventHint, Integration, IntegrationClass, Options, SdkInfo, Severity } from '@sentry/types';\nimport { Dsn, isPrimitive, isThenable, logger, SyncPromise, truncate, uuid4 } from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the enviornment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected readonly _integrations: IntegrationIndex = {};\n\n  /** Is the client still processing a call? */\n  protected _processing: boolean = false;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._getBackend()\n      .eventFromException(exception, hint)\n      .then(event => this._processEvent(event, hint, scope))\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._processing = true;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(`${message}`, level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    promisedEvent\n      .then(event => this._processEvent(event, hint, scope))\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._processEvent(event, hint, scope)\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(status => {\n      clearInterval(status.interval);\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => status.ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegrations(): IntegrationIndex {\n    return this._integrations || {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<{ ready: boolean; interval: number }> {\n    return new SyncPromise<{ ready: boolean; interval: number }>(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      let interval = 0;\n      clearInterval(interval);\n\n      interval = (setInterval(() => {\n        if (!this._processing) {\n          resolve({\n            interval,\n            ready: true,\n          });\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            resolve({\n              interval,\n              ready: false,\n            });\n          }\n        }\n      }, tick) as unknown) as number;\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { environment, release, dist, maxValueLength = 250 } = this.getOptions();\n\n    const prepared: Event = { ...event };\n    if (prepared.environment === undefined && environment !== undefined) {\n      prepared.environment = environment;\n    }\n    if (prepared.release === undefined && release !== undefined) {\n      prepared.release = release;\n    }\n\n    if (prepared.dist === undefined && dist !== undefined) {\n      prepared.dist = dist;\n    }\n\n    if (prepared.message) {\n      prepared.message = truncate(prepared.message, maxValueLength);\n    }\n\n    const exception = prepared.exception && prepared.exception.values && prepared.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = prepared.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n\n    if (prepared.event_id === undefined) {\n      prepared.event_id = hint && hint.event_id ? hint.event_id : uuid4();\n    }\n\n    this._addIntegrations(prepared.sdk);\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (scope) {\n      // In case we have a hub we reassign it.\n      result = scope.applyToEvent(prepared, hint);\n    }\n\n    return result;\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  protected _addIntegrations(sdkInfo?: SdkInfo): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject('SDK not enabled, will not send event.');\n    }\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    if (typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject('This event has been sampled, will not send event.');\n    }\n\n    return new SyncPromise((resolve, reject) => {\n      this._prepareEvent(event, scope, hint)\n        .then(prepared => {\n          if (prepared === null) {\n            reject('An event processor returned null, will not send event.');\n            return;\n          }\n\n          let finalEvent: Event | null = prepared;\n\n          try {\n            const isInternalException = hint && hint.data && (hint.data as { [key: string]: any }).__sentry__ === true;\n            if (isInternalException || !beforeSend) {\n              this._getBackend().sendEvent(finalEvent);\n              resolve(finalEvent);\n              return;\n            }\n\n            const beforeSendResult = beforeSend(prepared, hint);\n            // tslint:disable-next-line:strict-type-predicates\n            if (typeof beforeSendResult === 'undefined') {\n              logger.error('`beforeSend` method has to return `null` or a valid event.');\n            } else if (isThenable(beforeSendResult)) {\n              this._handleAsyncBeforeSend(beforeSendResult as PromiseLike<Event | null>, resolve, reject);\n            } else {\n              finalEvent = beforeSendResult as Event | null;\n\n              if (finalEvent === null) {\n                logger.log('`beforeSend` returned `null`, will not send event.');\n                resolve(null);\n                return;\n              }\n\n              // From here on we are really async\n              this._getBackend().sendEvent(finalEvent);\n              resolve(finalEvent);\n            }\n          } catch (exception) {\n            this.captureException(exception, {\n              data: {\n                __sentry__: true,\n              },\n              originalException: exception as Error,\n            });\n            reject('`beforeSend` threw an error, will not send event.');\n          }\n        })\n        .then(null, () => {\n          reject('`beforeSend` threw an error, will not send event.');\n        });\n    });\n  }\n\n  /**\n   * Resolves before send Promise and calls resolve/reject on parent SyncPromise.\n   */\n  private _handleAsyncBeforeSend(\n    beforeSend: PromiseLike<Event | null>,\n    resolve: (event: Event) => void,\n    reject: (reason: string) => void,\n  ): void {\n    beforeSend\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          reject('`beforeSend` returned `null`, will not send event.');\n          return;\n        }\n        // From here on we are really async\n        this._getBackend().sendEvent(processedEvent);\n        resolve(processedEvent);\n      })\n      .then(null, e => {\n        reject(`beforeSend rejected with ${e}`);\n      });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}