{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { BaseBackend } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, supportsFetch, SyncPromise } from '@sentry/utils';\nimport { eventFromString, eventFromUnknownInput } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\n\nvar BrowserBackend =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BrowserBackend, _super);\n\n  function BrowserBackend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype._setupTransport = function () {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return _super.prototype._setupTransport.call(this);\n    }\n\n    var transportOptions = tslib_1.__assign({}, this._options.transportOptions, {\n      dsn: this._options.dsn\n    });\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n\n    return new XHRTransport(transportOptions);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromException = function (exception, hint) {\n    var syntheticException = hint && hint.syntheticException || undefined;\n    var event = eventFromUnknownInput(exception, syntheticException, {\n      attachStacktrace: this._options.attachStacktrace\n    });\n    addExceptionMechanism(event, {\n      handled: true,\n      type: 'generic'\n    });\n    event.level = Severity.Error;\n\n    if (hint && hint.event_id) {\n      event.event_id = hint.event_id;\n    }\n\n    return SyncPromise.resolve(event);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n    if (level === void 0) {\n      level = Severity.Info;\n    }\n\n    var syntheticException = hint && hint.syntheticException || undefined;\n    var event = eventFromString(message, syntheticException, {\n      attachStacktrace: this._options.attachStacktrace\n    });\n    event.level = level;\n\n    if (hint && hint.event_id) {\n      event.event_id = hint.event_id;\n    }\n\n    return SyncPromise.resolve(event);\n  };\n\n  return BrowserBackend;\n}(BaseBackend);\n\nexport { BrowserBackend };","map":{"version":3,"sources":["../src/backend.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,cAA5B;AACA,SAAoC,QAApC,QAA+D,eAA/D;AACA,SAAS,qBAAT,EAAgC,aAAhC,EAA+C,WAA/C,QAAkE,eAAlE;AAEA,SAAS,eAAT,EAA0B,qBAA1B,QAAuD,gBAAvD;AACA,SAAS,cAAT,EAAyB,YAAzB,QAA6C,cAA7C;AAsBA;;;;;AAIA,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;AAApC,WAAA,cAAA,GAAA;;AAwDC;AAvDC;;;;;AAGU,EAAA,cAAA,CAAA,SAAA,CAAA,eAAA,GAAV,YAAA;AACE,QAAI,CAAC,KAAK,QAAL,CAAc,GAAnB,EAAwB;AACtB;AACA,aAAO,MAAA,CAAA,SAAA,CAAM,eAAN,CAAqB,IAArB,CAAqB,IAArB,CAAP;AACD;;AAED,QAAM,gBAAgB,GAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACjB,KAAK,QAAL,CAAc,gBADG,EACa;AACjC,MAAA,GAAG,EAAE,KAAK,QAAL,CAAc;AADc,KADb,CAAtB;;AAKA,QAAI,KAAK,QAAL,CAAc,SAAlB,EAA6B;AAC3B,aAAO,IAAI,KAAK,QAAL,CAAc,SAAlB,CAA4B,gBAA5B,CAAP;AACD;;AACD,QAAI,aAAa,EAAjB,EAAqB;AACnB,aAAO,IAAI,cAAJ,CAAmB,gBAAnB,CAAP;AACD;;AACD,WAAO,IAAI,YAAJ,CAAiB,gBAAjB,CAAP;AACD,GAlBS;AAoBV;;;;;AAGO,EAAA,cAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,SAA1B,EAA0C,IAA1C,EAA0D;AACxD,QAAM,kBAAkB,GAAI,IAAI,IAAI,IAAI,CAAC,kBAAd,IAAqC,SAAhE;AACA,QAAM,KAAK,GAAG,qBAAqB,CAAC,SAAD,EAAY,kBAAZ,EAAgC;AACjE,MAAA,gBAAgB,EAAE,KAAK,QAAL,CAAc;AADiC,KAAhC,CAAnC;AAGA,IAAA,qBAAqB,CAAC,KAAD,EAAQ;AAC3B,MAAA,OAAO,EAAE,IADkB;AAE3B,MAAA,IAAI,EAAE;AAFqB,KAAR,CAArB;AAIA,IAAA,KAAK,CAAC,KAAN,GAAc,QAAQ,CAAC,KAAvB;;AACA,QAAI,IAAI,IAAI,IAAI,CAAC,QAAjB,EAA2B;AACzB,MAAA,KAAK,CAAC,QAAN,GAAiB,IAAI,CAAC,QAAtB;AACD;;AACD,WAAO,WAAW,CAAC,OAAZ,CAAoB,KAApB,CAAP;AACD,GAdM;AAeP;;;;;AAGO,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,OAAxB,EAAyC,KAAzC,EAA0E,IAA1E,EAA0F;AAAjD,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAkB,QAAQ,CAAC,IAA3B;AAA+B;;AACtE,QAAM,kBAAkB,GAAI,IAAI,IAAI,IAAI,CAAC,kBAAd,IAAqC,SAAhE;AACA,QAAM,KAAK,GAAG,eAAe,CAAC,OAAD,EAAU,kBAAV,EAA8B;AACzD,MAAA,gBAAgB,EAAE,KAAK,QAAL,CAAc;AADyB,KAA9B,CAA7B;AAGA,IAAA,KAAK,CAAC,KAAN,GAAc,KAAd;;AACA,QAAI,IAAI,IAAI,IAAI,CAAC,QAAjB,EAA2B;AACzB,MAAA,KAAK,CAAC,QAAN,GAAiB,IAAI,CAAC,QAAtB;AACD;;AACD,WAAO,WAAW,CAAC,OAAZ,CAAoB,KAApB,CAAP;AACD,GAVM;;AAWT,SAAA,cAAA;AAAC,CAxDD,CAAoC,WAApC,CAAA","sourcesContent":["import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { addExceptionMechanism, supportsFetch, SyncPromise } from '@sentry/utils';\n\nimport { eventFromString, eventFromUnknownInput } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To whitelist certain errors instead, use {@link Options.whitelistUrls}.\n   * By default, all errors will be sent.\n   */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.blacklistUrls}.\n   * By default, all errors will be sent.\n   */\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: any, hint?: EventHint): PromiseLike<Event> {\n    const syntheticException = (hint && hint.syntheticException) || undefined;\n    const event = eventFromUnknownInput(exception, syntheticException, {\n      attachStacktrace: this._options.attachStacktrace,\n    });\n    addExceptionMechanism(event, {\n      handled: true,\n      type: 'generic',\n    });\n    event.level = Severity.Error;\n    if (hint && hint.event_id) {\n      event.event_id = hint.event_id;\n    }\n    return SyncPromise.resolve(event);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    const syntheticException = (hint && hint.syntheticException) || undefined;\n    const event = eventFromString(message, syntheticException, {\n      attachStacktrace: this._options.attachStacktrace,\n    });\n    event.level = level;\n    if (hint && hint.event_id) {\n      event.event_id = hint.event_id;\n    }\n    return SyncPromise.resolve(event);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}