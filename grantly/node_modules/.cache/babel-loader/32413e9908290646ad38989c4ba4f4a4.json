{"ast":null,"code":"var originalFunctionToString;\n/** Patch toString calls to return proper name for wrapped functions */\n\nvar FunctionToString =\n/** @class */\nfunction () {\n  function FunctionToString() {\n    /**\n     * @inheritDoc\n     */\n    this.name = FunctionToString.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  FunctionToString.prototype.setupOnce = function () {\n    originalFunctionToString = Function.prototype.toString;\n\n    Function.prototype.toString = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var context = this.__sentry_original__ || this; // tslint:disable-next-line:no-unsafe-any\n\n      return originalFunctionToString.apply(context, args);\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  FunctionToString.id = 'FunctionToString';\n  return FunctionToString;\n}();\n\nexport { FunctionToString };","map":{"version":3,"sources":["../../src/integrations/functiontostring.ts"],"names":[],"mappings":"AAEA,IAAI,wBAAJ;AAEA;;AACA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA;AACE;;;AAGO,SAAA,IAAA,GAAe,gBAAgB,CAAC,EAAhC;AAmBR;AAZC;;;;;AAGO,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,IAAA,wBAAwB,GAAG,QAAQ,CAAC,SAAT,CAAmB,QAA9C;;AAEA,IAAA,QAAQ,CAAC,SAAT,CAAmB,QAAnB,GAA8B,YAAA;AAAgC,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC5D,UAAM,OAAO,GAAG,KAAK,mBAAL,IAA4B,IAA5C,CAD4B,CAE5B;;AACA,aAAO,wBAAwB,CAAC,KAAzB,CAA+B,OAA/B,EAAwC,IAAxC,CAAP;AACD,KAJD;AAKD,GARM;AARP;;;;;AAGc,EAAA,gBAAA,CAAA,EAAA,GAAa,kBAAb;AAchB,SAAA,gBAAA;AAAC,CAvBD,EAAA;;SAAa,gB","sourcesContent":["import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    originalFunctionToString = Function.prototype.toString;\n\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      // tslint:disable-next-line:no-unsafe-any\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}