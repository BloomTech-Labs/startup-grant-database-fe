{"ast":null,"code":"import { Dsn, timestampWithMs, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/** Helper class to provide urls to different Sentry endpoints. */\n\nvar API =\n/** @class */\nfunction () {\n  /** Create a new instance of API */\n  function API(dsn) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n  }\n  /** Returns the Dsn object. */\n\n\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Returns a string with auth headers in the url to the store endpoint. */\n\n\n  API.prototype.getStoreEndpoint = function () {\n    return \"\" + this._getBaseUrl() + this.getStoreEndpointPath();\n  };\n  /** Returns the store endpoint with auth added in url encoded. */\n\n\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    var dsn = this._dsnObject;\n    var auth = {\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION\n    }; // Auth is intentionally sent as part of query string (NOT as custom HTTP header)\n    // to avoid preflight CORS requests\n\n    return this.getStoreEndpoint() + \"?\" + urlEncode(auth);\n  };\n  /** Returns the base path of the url including the port. */\n\n\n  API.prototype._getBaseUrl = function () {\n    var dsn = this._dsnObject;\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port;\n  };\n  /** Returns only the path component for the store endpoint. */\n\n\n  API.prototype.getStoreEndpointPath = function () {\n    var dsn = this._dsnObject;\n    return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n  };\n  /** Returns an object that can be used in request headers. */\n\n\n  API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n    var dsn = this._dsnObject;\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_timestamp=\" + timestampWithMs()); // TODO: This can be removed\n\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.user);\n\n    if (dsn.pass) {\n      header.push(\"sentry_secret=\" + dsn.pass);\n    }\n\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', ')\n    };\n  };\n  /** Returns the url to the report dialog endpoint. */\n\n\n  API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n    if (dialogOptions === void 0) {\n      dialogOptions = {};\n    }\n\n    var dsn = this._dsnObject;\n    var endpoint = \"\" + this._getBaseUrl() + (dsn.path ? \"/\" + dsn.path : '') + \"/api/embed/error-page/\";\n    var encodedOptions = [];\n    encodedOptions.push(\"dsn=\" + dsn.toString());\n\n    for (var key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n\n        if (dialogOptions.user.name) {\n          encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n        }\n\n        if (dialogOptions.user.email) {\n          encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n        }\n      } else {\n        encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n      }\n    }\n\n    if (encodedOptions.length) {\n      return endpoint + \"?\" + encodedOptions.join('&');\n    }\n\n    return endpoint;\n  };\n\n  return API;\n}();\n\nexport { API };","map":{"version":3,"sources":["../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnLike } from '@sentry/types';\nimport { Dsn, timestampWithMs, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns a string with auth headers in the url to the store endpoint. */\n  public getStoreEndpoint(): string {\n    return `${this._getBaseUrl()}${this.getStoreEndpointPath()}`;\n  }\n\n  /** Returns the store endpoint with auth added in url encoded. */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      sentry_key: dsn.user, // sentry_key is currently used in tracing integration to identify internal sentry requests\n      sentry_version: SENTRY_API_VERSION,\n    };\n    // Auth is intentionally sent as part of query string (NOT as custom HTTP header)\n    // to avoid preflight CORS requests\n    return `${this.getStoreEndpoint()}?${urlEncode(auth)}`;\n  }\n\n  /** Returns the base path of the url including the port. */\n  private _getBaseUrl(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /** Returns an object that can be used in request headers. */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_timestamp=${timestampWithMs()}`); // TODO: This can be removed\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this._getBaseUrl()}${dsn.path ? `/${dsn.path}` : ''}/api/embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}