{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getCurrentHub } from '@sentry/hub';\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n\nfunction callOnHub(method) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var hub = getCurrentHub();\n\n  if (hub && hub[method]) {\n    // tslint:disable-next-line:no-unsafe-any\n    return hub[method].apply(hub, tslib_1.__spread(args));\n  }\n\n  throw new Error(\"No hub defined or \" + method + \" was not found on the hub, please open a bug report.\");\n}\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n\n\nexport function captureException(exception) {\n  var syntheticException;\n\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception;\n  }\n\n  return callOnHub('captureException', exception, {\n    originalException: exception,\n    syntheticException: syntheticException\n  });\n}\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\n\nexport function captureMessage(message, level) {\n  var syntheticException;\n\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception;\n  }\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException: syntheticException\n  });\n}\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\n\nexport function captureEvent(event) {\n  return callOnHub('captureEvent', event);\n}\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\n\nexport function configureScope(callback) {\n  callOnHub('configureScope', callback);\n}\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\n\nexport function addBreadcrumb(breadcrumb) {\n  callOnHub('addBreadcrumb', breadcrumb);\n}\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normailzed.\n */\n\nexport function setContext(name, context) {\n  callOnHub('setContext', name, context);\n}\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\n\nexport function setExtras(extras) {\n  callOnHub('setExtras', extras);\n}\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\n\nexport function setTags(tags) {\n  callOnHub('setTags', tags);\n}\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normailzed.\n */\n\nexport function setExtra(key, extra) {\n  callOnHub('setExtra', key, extra);\n}\n/**\n * Set key:value that will be sent as tags data with the event.\n * @param key String key of tag\n * @param value String value of tag\n */\n\nexport function setTag(key, value) {\n  callOnHub('setTag', key, value);\n}\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\n\nexport function setUser(user) {\n  callOnHub('setUser', user);\n}\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\n\nexport function withScope(callback) {\n  callOnHub('withScope', callback);\n}\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n\nexport function _callOnClient(method) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  callOnHub.apply(void 0, tslib_1.__spread(['_invokeClient', method], args));\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport { Breadcrumb, Event, Severity, User } from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // tslint:disable-next-line:no-unsafe-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\nexport function captureException(exception: any): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, level?: Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normailzed.\n */\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: { [key: string]: any }): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: string }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normailzed.\n */\n\nexport function setExtra(key: string, extra: any): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n * @param key String key of tag\n * @param value String value of tag\n */\nexport function setTag(key: string, value: string): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}