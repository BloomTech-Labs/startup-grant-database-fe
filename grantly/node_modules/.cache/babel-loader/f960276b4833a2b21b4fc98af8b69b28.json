{"ast":null,"code":"import { isString } from './is';\nimport { snipLine } from './string';\n/**\n * Requires a module which is protected _against bundler minification.\n *\n * @param request The module path to resolve\n */\n\nexport function dynamicRequire(mod, request) {\n  // tslint:disable-next-line: no-unsafe-any\n  return mod.require(request);\n}\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\n\nexport function isNodeEnv() {\n  // tslint:disable:strict-type-predicates\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\nvar fallbackGlobalObject = {};\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\n\nexport function getGlobalObject() {\n  return isNodeEnv() ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : fallbackGlobalObject;\n}\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\n\nexport function uuid4() {\n  var global = getGlobalObject();\n  var crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    var arr = new Uint16Array(8);\n    crypto.getRandomValues(arr); // set 4 in byte 7\n    // tslint:disable-next-line:no-bitwise\n\n    arr[3] = arr[3] & 0xfff | 0x4000; // set 2 most significant bits of byte 9 to '10'\n    // tslint:disable-next-line:no-bitwise\n\n    arr[4] = arr[4] & 0x3fff | 0x8000;\n\n    var pad = function (num) {\n      var v = num.toString(16);\n\n      while (v.length < 4) {\n        v = \"0\" + v;\n      }\n\n      return v;\n    };\n\n    return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);\n  } // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n\n\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    // tslint:disable-next-line:no-bitwise\n    var r = Math.random() * 16 | 0; // tslint:disable-next-line:no-bitwise\n\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\n\nexport function parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n\n  var match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  } // coerce to undefined values to empty string so we don't get 'undefined'\n\n\n  var query = match[6] || '';\n  var fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment\n  };\n}\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\n\nexport function getEventDescription(event) {\n  if (event.message) {\n    return event.message;\n  }\n\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    var exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return exception.type + \": \" + exception.value;\n    }\n\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n\n  return event.event_id || '<unknown>';\n}\n/** JSDoc */\n\nexport function consoleSandbox(callback) {\n  var global = getGlobalObject();\n  var levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  var originalConsole = global.console;\n  var wrappedLevels = {}; // Restore all wrapped console methods\n\n  levels.forEach(function (level) {\n    if (level in global.console && originalConsole[level].__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level];\n      originalConsole[level] = originalConsole[level].__sentry_original__;\n    }\n  }); // Perform callback manipulations\n\n  var result = callback(); // Revert restoration to wrapped state\n\n  Object.keys(wrappedLevels).forEach(function (level) {\n    originalConsole[level] = wrappedLevels[level];\n  });\n  return result;\n}\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\n\nexport function addExceptionTypeValue(event, value, type) {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\n\nexport function addExceptionMechanism(event, mechanism) {\n  if (mechanism === void 0) {\n    mechanism = {};\n  } // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n\n\n  try {\n    // @ts-ignore\n    // tslint:disable:no-non-null-assertion\n    event.exception.values[0].mechanism = event.exception.values[0].mechanism || {};\n    Object.keys(mechanism).forEach(function (key) {\n      // @ts-ignore\n      event.exception.values[0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {// no-empty\n  }\n}\n/**\n * A safe form of location.href\n */\n\nexport function getLocationHref() {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\nexport function htmlTreeAsString(elem) {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var MAX_OUTPUT_LEN = 80;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = ' > ';\n    var sepLength = separator.length;\n    var nextStr = void 0;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem); // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n        break;\n      }\n\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\n\nfunction _htmlElementAsString(el) {\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  if (elem.id) {\n    out.push(\"#\" + elem.id);\n  }\n\n  className = elem.className;\n\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n\n    for (i = 0; i < classes.length; i++) {\n      out.push(\".\" + classes[i]);\n    }\n  }\n\n  var attrWhitelist = ['type', 'name', 'title', 'alt'];\n\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n\n    if (attr) {\n      out.push(\"[\" + key + \"=\\\"\" + attr + \"\\\"]\");\n    }\n  }\n\n  return out.join('');\n}\n/**\n * Returns a timestamp in seconds with milliseconds precision.\n */\n\n\nexport function timestampWithMs() {\n  return new Date().getTime() / 1000;\n} // https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\n\nvar SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\n\nexport function parseSemver(input) {\n  var match = input.match(SEMVER_REGEXP) || [];\n  var major = parseInt(match[1], 10);\n  var minor = parseInt(match[2], 10);\n  var patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4]\n  };\n}\nvar defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\n\nexport function parseRetryAfterHeader(now, header) {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  var headerDelay = parseInt(\"\" + header, 10);\n\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  var headerDate = Date.parse(\"\" + header);\n\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\nvar defaultFunctionName = '<anonymous>';\n/**\n * Safely extract function name from itself\n */\n\nexport function getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\n\nexport function addContextToFrame(lines, frame, linesOfContext) {\n  if (linesOfContext === void 0) {\n    linesOfContext = 5;\n  }\n\n  var lineno = frame.lineno || 0;\n  var maxLines = lines.length;\n  var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n  frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function (line) {\n    return snipLine(line, 0);\n  });\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n  frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function (line) {\n    return snipLine(line, 0);\n  });\n}","map":{"version":3,"sources":["../src/misc.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, Integration, StackFrame, WrappedFunction } from '@sentry/types';\n\nimport { isString } from './is';\nimport { snipLine } from './string';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\n/**\n * Requires a module which is protected _against bundler minification.\n *\n * @param request The module path to resolve\n */\nexport function dynamicRequire(mod: any, request: string): any {\n  // tslint:disable-next-line: no-unsafe-any\n  return mod.require(request);\n}\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // tslint:disable:strict-type-predicates\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n// tslint:enable:strict-type-predicates\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // tslint:disable-next-line:no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // tslint:disable-next-line:no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // tslint:disable-next-line:no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    if (level in global.console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\nexport function addExceptionMechanism(\n  event: Event,\n  mechanism: {\n    [key: string]: any;\n  } = {},\n): void {\n  // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n  try {\n    // @ts-ignore\n    // tslint:disable:no-non-null-assertion\n    event.exception!.values![0].mechanism = event.exception!.values![0].mechanism || {};\n    Object.keys(mechanism).forEach(key => {\n      // @ts-ignore\n      event.exception!.values![0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {\n    // no-empty\n  }\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown): string {\n  const elem = el as {\n    getAttribute(key: string): string; // tslint:disable-line:completed-docs\n    tagName?: string;\n    id?: string;\n    className?: string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const attrWhitelist = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * Returns a timestamp in seconds with milliseconds precision.\n */\nexport function timestampWithMs(): number {\n  return new Date().getTime() / 1000;\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\nconst defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\nexport function parseRetryAfterHeader(now: number, header?: string | number | null): number {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}