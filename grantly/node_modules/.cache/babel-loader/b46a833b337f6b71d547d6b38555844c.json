{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Status } from '@sentry/types';\nimport { logger, parseRetryAfterHeader, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\n/** `XHR` based transport */\n\nvar XHRTransport =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(XHRTransport, _super);\n\n  function XHRTransport() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** Locks transport after receiving 429 response */\n\n\n    _this._disabledUntil = new Date(Date.now());\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  XHRTransport.prototype.sendEvent = function (event) {\n    var _this = this;\n\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event: event,\n        reason: \"Transport locked till \" + this._disabledUntil + \" due to too many requests.\",\n        status: 429\n      });\n    }\n\n    return this._buffer.add(new SyncPromise(function (resolve, reject) {\n      var request = new XMLHttpRequest();\n\n      request.onreadystatechange = function () {\n        if (request.readyState !== 4) {\n          return;\n        }\n\n        var status = Status.fromHttpCode(request.status);\n\n        if (status === Status.Success) {\n          resolve({\n            status: status\n          });\n          return;\n        }\n\n        if (status === Status.RateLimit) {\n          var now = Date.now();\n          _this._disabledUntil = new Date(now + parseRetryAfterHeader(now, request.getResponseHeader('Retry-After')));\n          logger.warn(\"Too many requests, backing off till: \" + _this._disabledUntil);\n        }\n\n        reject(request);\n      };\n\n      request.open('POST', _this.url);\n\n      for (var header in _this.options.headers) {\n        if (_this.options.headers.hasOwnProperty(header)) {\n          request.setRequestHeader(header, _this.options.headers[header]);\n        }\n      }\n\n      request.send(JSON.stringify(event));\n    }));\n  };\n\n  return XHRTransport;\n}(BaseTransport);\n\nexport { XHRTransport };","map":{"version":3,"sources":["../../src/transports/xhr.ts"],"names":[],"mappings":";AAAA,SAA0B,MAA1B,QAAwC,eAAxC;AACA,SAAS,MAAT,EAAiB,qBAAjB,EAAwC,WAAxC,QAA2D,eAA3D;AAEA,SAAS,aAAT,QAA8B,QAA9B;AAEA;;AACA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAAlC,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACE;;;AACQ,IAAA,KAAA,CAAA,cAAA,GAAuB,IAAI,IAAJ,CAAS,IAAI,CAAC,GAAL,EAAT,CAAvB;;AAiDT;AA/CC;;;;;AAGO,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAA6B;AAA7B,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,IAAI,IAAJ,CAAS,IAAI,CAAC,GAAL,EAAT,IAAuB,KAAK,cAAhC,EAAgD;AAC9C,aAAO,OAAO,CAAC,MAAR,CAAe;AACpB,QAAA,KAAK,EAAA,KADe;AAEpB,QAAA,MAAM,EAAE,2BAAyB,KAAK,cAA9B,GAA4C,4BAFhC;AAGpB,QAAA,MAAM,EAAE;AAHY,OAAf,CAAP;AAKD;;AAED,WAAO,KAAK,OAAL,CAAa,GAAb,CACL,IAAI,WAAJ,CAA0B,UAAC,OAAD,EAAU,MAAV,EAAgB;AACxC,UAAM,OAAO,GAAG,IAAI,cAAJ,EAAhB;;AAEA,MAAA,OAAO,CAAC,kBAAR,GAA6B,YAAA;AAC3B,YAAI,OAAO,CAAC,UAAR,KAAuB,CAA3B,EAA8B;AAC5B;AACD;;AAED,YAAM,MAAM,GAAG,MAAM,CAAC,YAAP,CAAoB,OAAO,CAAC,MAA5B,CAAf;;AAEA,YAAI,MAAM,KAAK,MAAM,CAAC,OAAtB,EAA+B;AAC7B,UAAA,OAAO,CAAC;AAAE,YAAA,MAAM,EAAA;AAAR,WAAD,CAAP;AACA;AACD;;AAED,YAAI,MAAM,KAAK,MAAM,CAAC,SAAtB,EAAiC;AAC/B,cAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,UAAA,KAAI,CAAC,cAAL,GAAsB,IAAI,IAAJ,CAAS,GAAG,GAAG,qBAAqB,CAAC,GAAD,EAAM,OAAO,CAAC,iBAAR,CAA0B,aAA1B,CAAN,CAApC,CAAtB;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,0CAAwC,KAAI,CAAC,cAAzD;AACD;;AAED,QAAA,MAAM,CAAC,OAAD,CAAN;AACD,OAnBD;;AAqBA,MAAA,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,KAAI,CAAC,GAA1B;;AACA,WAAK,IAAM,MAAX,IAAqB,KAAI,CAAC,OAAL,CAAa,OAAlC,EAA2C;AACzC,YAAI,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB,cAArB,CAAoC,MAApC,CAAJ,EAAiD;AAC/C,UAAA,OAAO,CAAC,gBAAR,CAAyB,MAAzB,EAAiC,KAAI,CAAC,OAAL,CAAa,OAAb,CAAqB,MAArB,CAAjC;AACD;AACF;;AACD,MAAA,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,SAAL,CAAe,KAAf,CAAb;AACD,KA/BD,CADK,CAAP;AAkCD,GA3CM;;AA4CT,SAAA,YAAA;AAAC,CAnDD,CAAkC,aAAlC,CAAA","sourcesContent":["import { Event, Response, Status } from '@sentry/types';\nimport { logger, parseRetryAfterHeader, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = () => {\n          if (request.readyState !== 4) {\n            return;\n          }\n\n          const status = Status.fromHttpCode(request.status);\n\n          if (status === Status.Success) {\n            resolve({ status });\n            return;\n          }\n\n          if (status === Status.RateLimit) {\n            const now = Date.now();\n            this._disabledUntil = new Date(now + parseRetryAfterHeader(now, request.getResponseHeader('Retry-After')));\n            logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n          }\n\n          reject(request);\n        };\n\n        request.open('POST', this.url);\n        for (const header in this.options.headers) {\n          if (this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, this.options.headers[header]);\n          }\n        }\n        request.send(JSON.stringify(event));\n      }),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}