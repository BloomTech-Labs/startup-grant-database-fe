{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getGlobalObject, isThenable, normalize, SyncPromise, timestampWithMs } from '@sentry/utils';\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\n\nvar Scope =\n/** @class */\nfunction () {\n  function Scope() {\n    /** Flag if notifiying is happening. */\n    this._notifyingListeners = false;\n    /** Callback for client to receive scope changes. */\n\n    this._scopeListeners = [];\n    /** Callback list that will be called after {@link applyToEvent}. */\n\n    this._eventProcessors = [];\n    /** Array of breadcrumbs. */\n\n    this._breadcrumbs = [];\n    /** User */\n\n    this._user = {};\n    /** Tags */\n\n    this._tags = {};\n    /** Extra */\n\n    this._extra = {};\n    /** Contexts */\n\n    this._context = {};\n  }\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n\n\n  Scope.prototype.addScopeListener = function (callback) {\n    this._scopeListeners.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addEventProcessor = function (callback) {\n    this._eventProcessors.push(callback);\n\n    return this;\n  };\n  /**\n   * This will be called on every set call.\n   */\n\n\n  Scope.prototype._notifyScopeListeners = function () {\n    var _this = this;\n\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      setTimeout(function () {\n        _this._scopeListeners.forEach(function (callback) {\n          callback(_this);\n        });\n\n        _this._notifyingListeners = false;\n      });\n    }\n  };\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n\n\n  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {\n    var _this = this;\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    return new SyncPromise(function (resolve, reject) {\n      var processor = processors[index]; // tslint:disable-next-line:strict-type-predicates\n\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor(tslib_1.__assign({}, event), hint);\n\n        if (isThenable(result)) {\n          result.then(function (final) {\n            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n          }).then(null, reject);\n        } else {\n          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setUser = function (user) {\n    this._user = normalize(user);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTags = function (tags) {\n    this._tags = tslib_1.__assign({}, this._tags, normalize(tags));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTag = function (key, value) {\n    var _a;\n\n    this._tags = tslib_1.__assign({}, this._tags, (_a = {}, _a[key] = normalize(value), _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtras = function (extra) {\n    this._extra = tslib_1.__assign({}, this._extra, normalize(extra));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtra = function (key, extra) {\n    var _a;\n\n    this._extra = tslib_1.__assign({}, this._extra, (_a = {}, _a[key] = normalize(extra), _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setFingerprint = function (fingerprint) {\n    this._fingerprint = normalize(fingerprint);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setLevel = function (level) {\n    this._level = normalize(level);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTransaction = function (transaction) {\n    this._transaction = transaction;\n\n    if (this._span) {\n      this._span.transaction = transaction;\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setContext = function (name, context) {\n    this._context[name] = context ? normalize(context) : undefined;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSpan = function (span) {\n    this._span = span;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Internal getter for Span, used in Hub.\n   * @hidden\n   */\n\n\n  Scope.prototype.getSpan = function () {\n    return this._span;\n  };\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n\n\n  Scope.clone = function (scope) {\n    var newScope = new Scope();\n\n    if (scope) {\n      newScope._breadcrumbs = tslib_1.__spread(scope._breadcrumbs);\n      newScope._tags = tslib_1.__assign({}, scope._tags);\n      newScope._extra = tslib_1.__assign({}, scope._extra);\n      newScope._context = tslib_1.__assign({}, scope._context);\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._transaction = scope._transaction;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = tslib_1.__spread(scope._eventProcessors);\n    }\n\n    return newScope;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clear = function () {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._context = {};\n    this._level = undefined;\n    this._transaction = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {\n    var timestamp = timestampWithMs();\n\n    var mergedBreadcrumb = tslib_1.__assign({\n      timestamp: timestamp\n    }, breadcrumb);\n\n    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? tslib_1.__spread(this._breadcrumbs, [normalize(mergedBreadcrumb)]).slice(-maxBreadcrumbs) : tslib_1.__spread(this._breadcrumbs, [normalize(mergedBreadcrumb)]);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clearBreadcrumbs = function () {\n    this._breadcrumbs = [];\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n\n\n  Scope.prototype._applyFingerprint = function (event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event\n\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    } // If we have no data at all, remove empty array default\n\n\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  };\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n\n\n  Scope.prototype.applyToEvent = function (event, hint) {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = tslib_1.__assign({}, this._extra, event.extra);\n    }\n\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = tslib_1.__assign({}, this._tags, event.tags);\n    }\n\n    if (this._user && Object.keys(this._user).length) {\n      event.user = tslib_1.__assign({}, this._user, event.user);\n    }\n\n    if (this._context && Object.keys(this._context).length) {\n      event.contexts = tslib_1.__assign({}, this._context, event.contexts);\n    }\n\n    if (this._level) {\n      event.level = this._level;\n    }\n\n    if (this._transaction) {\n      event.transaction = this._transaction;\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = tslib_1.__spread(event.breadcrumbs || [], this._breadcrumbs);\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    return this._notifyEventProcessors(tslib_1.__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);\n  };\n\n  return Scope;\n}();\n\nexport { Scope };\n/**\n * Retruns the global event processors.\n */\n\nfunction getGlobalEventProcessors() {\n  var global = getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\n\n\nexport function addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}","map":{"version":3,"sources":["../src/scope.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Breadcrumb,\n  Event,\n  EventHint,\n  EventProcessor,\n  Scope as ScopeInterface,\n  Severity,\n  Span,\n  User,\n} from '@sentry/types';\nimport { getGlobalObject, isThenable, normalize, SyncPromise, timestampWithMs } from '@sentry/utils';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: string } = {};\n\n  /** Extra */\n  protected _extra: { [key: string]: any } = {};\n\n  /** Contexts */\n  protected _context: { [key: string]: any } = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction */\n  protected _transaction?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      setTimeout(() => {\n        this._scopeListeners.forEach(callback => {\n          callback(this);\n        });\n        this._notifyingListeners = false;\n      });\n    }\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      // tslint:disable-next-line:strict-type-predicates\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = normalize(user);\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): this {\n    this._tags = {\n      ...this._tags,\n      ...normalize(tags),\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this._tags = { ...this._tags, [key]: normalize(value) };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extra: { [key: string]: any }): this {\n    this._extra = {\n      ...this._extra,\n      ...normalize(extra),\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: any): this {\n    this._extra = { ...this._extra, [key]: normalize(extra) };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = normalize(fingerprint);\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = normalize(level);\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransaction(transaction?: string): this {\n    this._transaction = transaction;\n    if (this._span) {\n      (this._span as any).transaction = transaction;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(name: string, context: { [key: string]: any } | null): this {\n    this._context[name] = context ? normalize(context) : undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Internal getter for Span, used in Hub.\n   * @hidden\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._context = { ...scope._context };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._transaction = scope._transaction;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._context = {};\n    this._level = undefined;\n    this._transaction = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const timestamp = timestampWithMs();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, normalize(mergedBreadcrumb)].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, normalize(mergedBreadcrumb)];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._context && Object.keys(this._context).length) {\n      event.contexts = { ...this._context, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transaction) {\n      event.transaction = this._transaction;\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  const global = getGlobalObject<Window | NodeJS.Global>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}