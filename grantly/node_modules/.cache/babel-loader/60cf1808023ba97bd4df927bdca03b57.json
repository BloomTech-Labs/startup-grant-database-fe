{"ast":null,"code":"var _ = require('../helper');\n\nfunction assert(options, password) {\n  if (!password) {\n    return false;\n  }\n\n  var i,\n      current = {\n    c: null,\n    count: 0\n  };\n\n  for (i = 0; i < password.length; i++) {\n    if (current.c !== password[i]) {\n      current.c = password[i];\n      current.count = 1;\n    } else {\n      current.count++;\n    }\n\n    if (current.count > options.max) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction explain(options, verified) {\n  var example = new Array(options.max + 2).join('a');\n  var d = {\n    message: 'No more than %d identical characters in a row (e.g., \"%s\" not allowed)',\n    code: 'identicalChars',\n    format: [options.max, example]\n  };\n\n  if (verified !== undefined) {\n    d.verified = verified;\n  }\n\n  return d;\n}\n\nmodule.exports = {\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isNumber(options.max) || _.isNaN(options.max) || options.max < 1) {\n      throw new Error('max should be a number greater than 1');\n    }\n\n    return true;\n  },\n  explain: explain,\n  missing: function (options, password) {\n    return explain(options, assert(options, password));\n  },\n  assert: assert\n};","map":{"version":3,"sources":["/Users/jacksonmccomas/Documents/Lambda/labs/startup-grant-database-fe/grantly/node_modules/password-sheriff/lib/rules/identicalChars.js"],"names":["_","require","assert","options","password","i","current","c","count","length","max","explain","verified","example","Array","join","d","message","code","format","undefined","module","exports","validate","isObject","Error","isNumber","isNaN","missing"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,WAAD,CAAf;;AAEA,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,QAAzB,EAAmC;AACjC,MAAI,CAACA,QAAL,EAAe;AACb,WAAO,KAAP;AACD;;AAED,MAAIC,CAAJ;AAAA,MAAOC,OAAO,GAAG;AAACC,IAAAA,CAAC,EAAE,IAAJ;AAAUC,IAAAA,KAAK,EAAE;AAAjB,GAAjB;;AAEA,OAAKH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,QAAQ,CAACK,MAAzB,EAAiCJ,CAAC,EAAlC,EAAsC;AACpC,QAAIC,OAAO,CAACC,CAAR,KAAcH,QAAQ,CAACC,CAAD,CAA1B,EAA+B;AAC7BC,MAAAA,OAAO,CAACC,CAAR,GAAYH,QAAQ,CAACC,CAAD,CAApB;AACAC,MAAAA,OAAO,CAACE,KAAR,GAAgB,CAAhB;AACD,KAHD,MAGO;AACLF,MAAAA,OAAO,CAACE,KAAR;AACD;;AAED,QAAIF,OAAO,CAACE,KAAR,GAAgBL,OAAO,CAACO,GAA5B,EAAiC;AAC/B,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AACD,SAASC,OAAT,CAAkBR,OAAlB,EAA2BS,QAA3B,EAAqC;AACjC,MAAIC,OAAO,GAAI,IAAIC,KAAJ,CAAUX,OAAO,CAACO,GAAR,GAAY,CAAtB,CAAD,CAA2BK,IAA3B,CAAgC,GAAhC,CAAd;AACA,MAAIC,CAAC,GAAG;AACNC,IAAAA,OAAO,EAAE,wEADH;AAENC,IAAAA,IAAI,EAAE,gBAFA;AAGNC,IAAAA,MAAM,EAAE,CAAChB,OAAO,CAACO,GAAT,EAAcG,OAAd;AAHF,GAAR;;AAKA,MAAID,QAAQ,KAAKQ,SAAjB,EAA4B;AAC1BJ,IAAAA,CAAC,CAACJ,QAAF,GAAaA,QAAb;AACD;;AACD,SAAOI,CAAP;AACD;;AAEHK,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,QAAQ,EAAE,UAAUpB,OAAV,EAAmB;AAC3B,QAAI,CAACH,CAAC,CAACwB,QAAF,CAAWrB,OAAX,CAAL,EAA0B;AACxB,YAAM,IAAIsB,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,QAAI,CAACzB,CAAC,CAAC0B,QAAF,CAAWvB,OAAO,CAACO,GAAnB,CAAD,IAA4BV,CAAC,CAAC2B,KAAF,CAAQxB,OAAO,CAACO,GAAhB,CAA5B,IAAoDP,OAAO,CAACO,GAAR,GAAc,CAAtE,EAA0E;AACxE,YAAM,IAAIe,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,WAAO,IAAP;AACD,GAXc;AAYfd,EAAAA,OAAO,EAAEA,OAZM;AAafiB,EAAAA,OAAO,EAAE,UAAUzB,OAAV,EAAmBC,QAAnB,EAA6B;AACpC,WAAOO,OAAO,CAACR,OAAD,EAAUD,MAAM,CAACC,OAAD,EAAUC,QAAV,CAAhB,CAAd;AACD,GAfc;AAgBfF,EAAAA,MAAM,EAAEA;AAhBO,CAAjB","sourcesContent":["var _ = require('../helper');\n\nfunction assert(options, password) {\n  if (!password) {\n    return false;\n  }\n\n  var i, current = {c: null, count: 0};\n\n  for (i = 0; i < password.length; i++) {\n    if (current.c !== password[i]) {\n      current.c = password[i];\n      current.count = 1;\n    } else {\n      current.count++;\n    }\n\n    if (current.count > options.max) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction explain (options, verified) {\n    var example = (new Array(options.max+2)).join('a');\n    var d = {\n      message: 'No more than %d identical characters in a row (e.g., \"%s\" not allowed)',\n      code: 'identicalChars',\n      format: [options.max, example]\n    };\n    if (verified !== undefined) {\n      d.verified = verified;\n    }\n    return d;\n  }\n\nmodule.exports = {\n  validate: function (options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isNumber(options.max) || _.isNaN(options.max) || options.max < 1 ) {\n      throw new Error('max should be a number greater than 1');\n    }\n\n    return true;\n  },\n  explain: explain,\n  missing: function (options, password) {\n    return explain(options, assert(options, password));\n  },\n  assert: assert\n};\n"]},"metadata":{},"sourceType":"script"}