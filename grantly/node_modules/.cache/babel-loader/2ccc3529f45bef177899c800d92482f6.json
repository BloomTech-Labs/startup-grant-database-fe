{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Status } from '@sentry/types';\nimport { getGlobalObject, logger, parseRetryAfterHeader, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\nvar global = getGlobalObject();\n/** `fetch` based transport */\n\nvar FetchTransport =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FetchTransport, _super);\n\n  function FetchTransport() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** Locks transport after receiving 429 response */\n\n\n    _this._disabledUntil = new Date(Date.now());\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  FetchTransport.prototype.sendEvent = function (event) {\n    var _this = this;\n\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event: event,\n        reason: \"Transport locked till \" + this._disabledUntil + \" due to too many requests.\",\n        status: 429\n      });\n    }\n\n    var defaultOptions = {\n      body: JSON.stringify(event),\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n    };\n\n    if (this.options.headers !== undefined) {\n      defaultOptions.headers = this.options.headers;\n    }\n\n    return this._buffer.add(new SyncPromise(function (resolve, reject) {\n      global.fetch(_this.url, defaultOptions).then(function (response) {\n        var status = Status.fromHttpCode(response.status);\n\n        if (status === Status.Success) {\n          resolve({\n            status: status\n          });\n          return;\n        }\n\n        if (status === Status.RateLimit) {\n          var now = Date.now();\n          _this._disabledUntil = new Date(now + parseRetryAfterHeader(now, response.headers.get('Retry-After')));\n          logger.warn(\"Too many requests, backing off till: \" + _this._disabledUntil);\n        }\n\n        reject(response);\n      }).catch(reject);\n    }));\n  };\n\n  return FetchTransport;\n}(BaseTransport);\n\nexport { FetchTransport };","map":{"version":3,"sources":["../../src/transports/fetch.ts"],"names":[],"mappings":";AAAA,SAA0B,MAA1B,QAAwC,eAAxC;AACA,SAAS,eAAT,EAA0B,MAA1B,EAAkC,qBAAlC,EAAyD,sBAAzD,EAAiF,WAAjF,QAAoG,eAApG;AAEA,SAAS,aAAT,QAA8B,QAA9B;AAEA,IAAM,MAAM,GAAG,eAAe,EAA9B;AAEA;;AACA,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;AAApC,WAAA,cAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACE;;;AACQ,IAAA,KAAA,CAAA,cAAA,GAAuB,IAAI,IAAJ,CAAS,IAAI,CAAC,GAAL,EAAT,CAAvB;;AAoDT;AAlDC;;;;;AAGO,EAAA,cAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAA6B;AAA7B,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,IAAI,IAAJ,CAAS,IAAI,CAAC,GAAL,EAAT,IAAuB,KAAK,cAAhC,EAAgD;AAC9C,aAAO,OAAO,CAAC,MAAR,CAAe;AACpB,QAAA,KAAK,EAAA,KADe;AAEpB,QAAA,MAAM,EAAE,2BAAyB,KAAK,cAA9B,GAA4C,4BAFhC;AAGpB,QAAA,MAAM,EAAE;AAHY,OAAf,CAAP;AAKD;;AAED,QAAM,cAAc,GAAgB;AAClC,MAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,KAAf,CAD4B;AAElC,MAAA,MAAM,EAAE,MAF0B;AAGlC;AACA;AACA;AACA;AACA,MAAA,cAAc,EAAG,sBAAsB,KAAK,QAAL,GAAgB;AAPrB,KAApC;;AAUA,QAAI,KAAK,OAAL,CAAa,OAAb,KAAyB,SAA7B,EAAwC;AACtC,MAAA,cAAc,CAAC,OAAf,GAAyB,KAAK,OAAL,CAAa,OAAtC;AACD;;AAED,WAAO,KAAK,OAAL,CAAa,GAAb,CACL,IAAI,WAAJ,CAA0B,UAAC,OAAD,EAAU,MAAV,EAAgB;AACxC,MAAA,MAAM,CACH,KADH,CACS,KAAI,CAAC,GADd,EACmB,cADnB,EAEG,IAFH,CAEQ,UAAA,QAAA,EAAQ;AACZ,YAAM,MAAM,GAAG,MAAM,CAAC,YAAP,CAAoB,QAAQ,CAAC,MAA7B,CAAf;;AAEA,YAAI,MAAM,KAAK,MAAM,CAAC,OAAtB,EAA+B;AAC7B,UAAA,OAAO,CAAC;AAAE,YAAA,MAAM,EAAA;AAAR,WAAD,CAAP;AACA;AACD;;AAED,YAAI,MAAM,KAAK,MAAM,CAAC,SAAtB,EAAiC;AAC/B,cAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,UAAA,KAAI,CAAC,cAAL,GAAsB,IAAI,IAAJ,CAAS,GAAG,GAAG,qBAAqB,CAAC,GAAD,EAAM,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,aAArB,CAAN,CAApC,CAAtB;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,0CAAwC,KAAI,CAAC,cAAzD;AACD;;AAED,QAAA,MAAM,CAAC,QAAD,CAAN;AACD,OAjBH,EAkBG,KAlBH,CAkBS,MAlBT;AAmBD,KApBD,CADK,CAAP;AAuBD,GA9CM;;AA+CT,SAAA,cAAA;AAAC,CAtDD,CAAoC,aAApC,CAAA","sourcesContent":["import { Event, Response, Status } from '@sentry/types';\nimport { getGlobalObject, logger, parseRetryAfterHeader, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const defaultOptions: RequestInit = {\n      body: JSON.stringify(event),\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n\n    if (this.options.headers !== undefined) {\n      defaultOptions.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(this.url, defaultOptions)\n          .then(response => {\n            const status = Status.fromHttpCode(response.status);\n\n            if (status === Status.Success) {\n              resolve({ status });\n              return;\n            }\n\n            if (status === Status.RateLimit) {\n              const now = Date.now();\n              this._disabledUntil = new Date(now + parseRetryAfterHeader(now, response.headers.get('Retry-After')));\n              logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n            }\n\n            reject(response);\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}