{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { API, BaseClient } from '@sentry/core';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { BrowserBackend } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\n\nvar BrowserClient =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BrowserClient, _super);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n\n\n  function BrowserClient(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _super.call(this, BrowserBackend, options) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BrowserClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'javascript';\n    event.sdk = tslib_1.__assign({}, event.sdk, {\n      name: SDK_NAME,\n      packages: tslib_1.__spread(event.sdk && event.sdk.packages || [], [{\n        name: 'npm:@sentry/browser',\n        version: SDK_VERSION\n      }]),\n      version: SDK_VERSION\n    });\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n\n\n  BrowserClient.prototype.showReportDialog = function (options) {\n    if (options === void 0) {\n      options = {};\n    } // doesn't work without a document (React Native)\n\n\n    var document = getGlobalObject().document;\n\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client is disabled');\n      return;\n    }\n\n    var dsn = options.dsn || this.getDsn();\n\n    if (!options.eventId) {\n      logger.error('Missing `eventId` option in showReportDialog call');\n      return;\n    }\n\n    if (!dsn) {\n      logger.error('Missing `Dsn` option in showReportDialog call');\n      return;\n    }\n\n    var script = document.createElement('script');\n    script.async = true;\n    script.src = new API(dsn).getReportDialogEndpoint(options);\n\n    if (options.onLoad) {\n      script.onload = options.onLoad;\n    }\n\n    (document.head || document.body).appendChild(script);\n  };\n\n  return BrowserClient;\n}(BaseClient);\n\nexport { BrowserClient };","map":{"version":3,"sources":["../src/client.ts"],"names":[],"mappings":";AAAA,SAAS,GAAT,EAAc,UAAd,QAAuC,cAAvC;AAEA,SAAS,eAAT,EAA0B,MAA1B,QAAwC,eAAxC;AAEA,SAAS,cAAT,QAA+C,WAA/C;AACA,SAAS,QAAT,EAAmB,WAAnB,QAAsC,WAAtC;AA6BA;;;;;;;AAMA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,OAAA,CAAA,SAAA,CAAA,aAAA,EAAA,MAAA;AACjC;;;;;;;AAKA,WAAA,aAAA,CAAmB,OAAnB,EAA+C;AAA5B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA4B;;WAC7C,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAN,EAAsB,OAAtB,KAA8B,I;AAC/B;AAED;;;;;AAGU,EAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,KAAxB,EAAsC,KAAtC,EAAqD,IAArD,EAAqE;AACnE,IAAA,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,QAAN,IAAkB,YAAnC;AACA,IAAA,KAAK,CAAC,GAAN,GAAS,OAAA,CAAA,QAAA,CAAA,EAAA,EACJ,KAAK,CAAC,GADF,EACK;AACZ,MAAA,IAAI,EAAE,QADM;AAEZ,MAAA,QAAQ,EAAA,OAAA,CAAA,QAAA,CACD,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,GAAN,CAAU,QAAxB,IAAqC,EADnC,EACsC,CAC5C;AACE,QAAA,IAAI,EAAE,qBADR;AAEE,QAAA,OAAO,EAAE;AAFX,OAD4C,CADtC,CAFI;AASZ,MAAA,OAAO,EAAE;AATG,KADL,CAAT;AAaA,WAAO,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,KAApB,EAA2B,KAA3B,EAAkC,IAAlC,CAAP;AACD,GAhBS;AAkBV;;;;;;;AAKO,EAAA,aAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,OAAxB,EAAyD;AAAjC,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAiC,KAAA,CACvD;;;AACA,QAAM,QAAQ,GAAG,eAAe,GAAW,QAA3C;;AACA,QAAI,CAAC,QAAL,EAAe;AACb;AACD;;AAED,QAAI,CAAC,KAAK,UAAL,EAAL,EAAwB;AACtB,MAAA,MAAM,CAAC,KAAP,CAAa,gEAAb;AACA;AACD;;AAED,QAAM,GAAG,GAAG,OAAO,CAAC,GAAR,IAAe,KAAK,MAAL,EAA3B;;AAEA,QAAI,CAAC,OAAO,CAAC,OAAb,EAAsB;AACpB,MAAA,MAAM,CAAC,KAAP,CAAa,mDAAb;AACA;AACD;;AAED,QAAI,CAAC,GAAL,EAAU;AACR,MAAA,MAAM,CAAC,KAAP,CAAa,+CAAb;AACA;AACD;;AAED,QAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,IAAf;AACA,IAAA,MAAM,CAAC,GAAP,GAAa,IAAI,GAAJ,CAAQ,GAAR,EAAa,uBAAb,CAAqC,OAArC,CAAb;;AAEA,QAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,MAAA,MAAM,CAAC,MAAP,GAAgB,OAAO,CAAC,MAAxB;AACD;;AAED,KAAC,QAAQ,CAAC,IAAT,IAAiB,QAAQ,CAAC,IAA3B,EAAiC,WAAjC,CAA6C,MAA7C;AACD,GAjCM;;AAkCT,SAAA,aAAA;AAAC,CAtED,CAAmC,UAAnC,CAAA","sourcesContent":["import { API, BaseClient, Scope } from '@sentry/core';\nimport { DsnLike, Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client is disabled');\n      return;\n    }\n\n    const dsn = options.dsn || this.getDsn();\n\n    if (!options.eventId) {\n      logger.error('Missing `eventId` option in showReportDialog call');\n      return;\n    }\n\n    if (!dsn) {\n      logger.error('Missing `Dsn` option in showReportDialog call');\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = new API(dsn).getReportDialogEndpoint(options);\n\n    if (options.onLoad) {\n      script.onload = options.onLoad;\n    }\n\n    (document.head || document.body).appendChild(script);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}