{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, getGlobalObject, getLocationHref, isErrorEvent, isPrimitive, isString, logger } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n/** Global handlers */\n\nvar GlobalHandlers =\n/** @class */\nfunction () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = GlobalHandlers.id;\n    /** JSDoc */\n\n    this._global = getGlobalObject();\n    /** JSDoc */\n\n    this._oldOnErrorHandler = null;\n    /** JSDoc */\n\n    this._oldOnUnhandledRejectionHandler = null;\n    /** JSDoc */\n\n    this._onErrorHandlerInstalled = false;\n    /** JSDoc */\n\n    this._onUnhandledRejectionHandlerInstalled = false;\n    this._options = tslib_1.__assign({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.prototype.setupOnce = function () {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._installGlobalOnErrorHandler = function () {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    var self = this; // tslint:disable-line:no-this-assignment\n\n    this._oldOnErrorHandler = this._global.onerror;\n\n    this._global.onerror = function (msg, url, line, column, error) {\n      var currentHub = getCurrentHub();\n      var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnErrorHandler) {\n          return self._oldOnErrorHandler.apply(this, arguments);\n        }\n\n        return false;\n      }\n\n      var client = currentHub.getClient();\n      var event = isPrimitive(error) ? self._eventFromIncompleteOnError(msg, url, line, column) : self._enhanceEventWithInitialFrame(eventFromUnknownInput(error, undefined, {\n        attachStacktrace: client && client.getOptions().attachStacktrace,\n        rejection: false\n      }), url, line, column);\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onerror'\n      });\n      currentHub.captureEvent(event, {\n        originalException: error\n      });\n\n      if (self._oldOnErrorHandler) {\n        return self._oldOnErrorHandler.apply(this, arguments);\n      }\n\n      return false;\n    };\n\n    this._onErrorHandlerInstalled = true;\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._installGlobalOnUnhandledRejectionHandler = function () {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    var self = this; // tslint:disable-line:no-this-assignment\n\n    this._oldOnUnhandledRejectionHandler = this._global.onunhandledrejection;\n\n    this._global.onunhandledrejection = function (e) {\n      var error = e;\n\n      try {\n        error = e && 'reason' in e ? e.reason : e;\n      } catch (_oO) {// no-empty\n      }\n\n      var currentHub = getCurrentHub();\n      var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnUnhandledRejectionHandler) {\n          return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n        }\n\n        return true;\n      }\n\n      var client = currentHub.getClient();\n      var event = isPrimitive(error) ? self._eventFromIncompleteRejection(error) : eventFromUnknownInput(error, undefined, {\n        attachStacktrace: client && client.getOptions().attachStacktrace,\n        rejection: true\n      });\n      event.level = Severity.Error;\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onunhandledrejection'\n      });\n      currentHub.captureEvent(event, {\n        originalException: error\n      });\n\n      if (self._oldOnUnhandledRejectionHandler) {\n        return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n      }\n\n      return true;\n    };\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  };\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n\n\n  GlobalHandlers.prototype._eventFromIncompleteOnError = function (msg, url, line, column) {\n    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i; // If 'message' is ErrorEvent, get real message from inside\n\n    var message = isErrorEvent(msg) ? msg.message : msg;\n    var name;\n\n    if (isString(message)) {\n      var groups = message.match(ERROR_TYPES_RE);\n\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    var event = {\n      exception: {\n        values: [{\n          type: name || 'Error',\n          value: message\n        }]\n      }\n    };\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  };\n  /**\n   * This function creates an Event from an TraceKitStackTrace that has part of it missing.\n   */\n\n\n  GlobalHandlers.prototype._eventFromIncompleteRejection = function (error) {\n    return {\n      exception: {\n        values: [{\n          type: 'UnhandledRejection',\n          value: \"Non-Error promise rejection captured with value: \" + error\n        }]\n      }\n    };\n  };\n  /** JSDoc */\n\n\n  GlobalHandlers.prototype._enhanceEventWithInitialFrame = function (event, url, line, column) {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n    var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    var filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno: colno,\n        filename: filename,\n        function: '?',\n        in_app: true,\n        lineno: lineno\n      });\n    }\n\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  GlobalHandlers.id = 'GlobalHandlers';\n  return GlobalHandlers;\n}();\n\nexport { GlobalHandlers };","map":{"version":3,"sources":["../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  getGlobalObject,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private readonly _global: Window = getGlobalObject();\n\n  /** JSDoc */\n  private _oldOnErrorHandler: OnErrorEventHandler = null;\n\n  /** JSDoc */\n  private _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    const self = this; // tslint:disable-line:no-this-assignment\n    this._oldOnErrorHandler = this._global.onerror;\n\n    this._global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n      const currentHub = getCurrentHub();\n      const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnErrorHandler) {\n          return self._oldOnErrorHandler.apply(this, arguments);\n        }\n        return false;\n      }\n\n      const client = currentHub.getClient();\n      const event = isPrimitive(error)\n        ? self._eventFromIncompleteOnError(msg, url, line, column)\n        : self._enhanceEventWithInitialFrame(\n            eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: false,\n            }),\n            url,\n            line,\n            column,\n          );\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onerror',\n      });\n\n      currentHub.captureEvent(event, {\n        originalException: error,\n      });\n\n      if (self._oldOnErrorHandler) {\n        return self._oldOnErrorHandler.apply(this, arguments);\n      }\n\n      return false;\n    };\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    const self = this; // tslint:disable-line:no-this-assignment\n    this._oldOnUnhandledRejectionHandler = this._global.onunhandledrejection;\n\n    this._global.onunhandledrejection = function(e: any): boolean {\n      let error = e;\n      try {\n        error = e && 'reason' in e ? e.reason : e;\n      } catch (_oO) {\n        // no-empty\n      }\n\n      const currentHub = getCurrentHub();\n      const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n      const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n      if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n        if (self._oldOnUnhandledRejectionHandler) {\n          return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n        }\n        return true;\n      }\n\n      const client = currentHub.getClient();\n      const event = isPrimitive(error)\n        ? self._eventFromIncompleteRejection(error)\n        : eventFromUnknownInput(error, undefined, {\n            attachStacktrace: client && client.getOptions().attachStacktrace,\n            rejection: true,\n          });\n\n      event.level = Severity.Error;\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onunhandledrejection',\n      });\n\n      currentHub.captureEvent(event, {\n        originalException: error,\n      });\n\n      if (self._oldOnUnhandledRejectionHandler) {\n        return self._oldOnUnhandledRejectionHandler.apply(this, arguments);\n      }\n\n      return true;\n    };\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace that has part of it missing.\n   */\n  private _eventFromIncompleteRejection(error: any): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            value: `Non-Error promise rejection captured with value: ${error}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}