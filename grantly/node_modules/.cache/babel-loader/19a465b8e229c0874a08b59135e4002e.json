{"ast":null,"code":"import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { GrantTypes } from \"./grantTypes\";\nimport { FilterTypes } from \"../filters/filterTypes\";\nimport { axiosWithOutAuth as axios, axiosWithAuth } from \"../utils/axiosConfig\";\nexport const useGrantActions = () => {\n  const dispatch = useDispatch();\n  const fetchGrants = useCallback(() => {\n    dispatch({\n      type: GrantTypes.FETCH_GRANTS_START\n    }); // @ts-ignore\n\n    axios().get(`/grants`).then(res => {\n      dispatch({\n        type: GrantTypes.FETCH_GRANTS_SUCCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: FilterTypes.FILTER_GRANT,\n        payload: res.data\n      });\n    }).catch(err => {\n      const data = err && err.response && err.response.data ? err.response.data : err;\n      dispatch({\n        type: GrantTypes.FETCH_GRANTS_FAILURE,\n        payload: data\n      });\n    });\n  }, [dispatch]);\n  const selectGrant = useCallback(grant => {\n    dispatch({\n      type: GrantTypes.SELECT_GRANT,\n      payload: grant\n    });\n  }, [dispatch]);\n  const postGrant = useCallback((data, token) => {\n    dispatch({\n      type: GrantTypes.POST_GRANTS_START,\n      payload: data\n    });\n    axiosWithAuth(token).post(\"/grants\", data).then(res => {\n      dispatch({\n        type: GrantTypes.POST_GRANTS_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      const data = err && err.response && err.response.data ? err.response.data : err;\n      dispatch({\n        type: GrantTypes.POST_GRANTS_FAILURE,\n        payload: data\n      });\n    });\n  }, [dispatch]);\n  return {\n    fetchGrants,\n    selectGrant,\n    postGrant\n  };\n};","map":{"version":3,"sources":["/Users/jacksonmccomas/Documents/Lambda/labs/startup-grant-database-fe/grantly/src/store/grants/useGrantActions.tsx"],"names":["useCallback","useDispatch","GrantTypes","FilterTypes","axiosWithOutAuth","axios","axiosWithAuth","useGrantActions","dispatch","fetchGrants","type","FETCH_GRANTS_START","get","then","res","FETCH_GRANTS_SUCCESS","payload","data","FILTER_GRANT","catch","err","response","FETCH_GRANTS_FAILURE","selectGrant","grant","SELECT_GRANT","postGrant","token","POST_GRANTS_START","post","POST_GRANTS_SUCCESS","POST_GRANTS_FAILURE"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAAgBC,UAAhB,QAAkC,cAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,gBAAgB,IAAIC,KAA7B,EAAoCC,aAApC,QAAyD,sBAAzD;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAAC,MAAM;AACpCQ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER,UAAU,CAACS;AAAnB,KAAD,CAAR,CADoC,CAEpC;;AACAN,IAAAA,KAAK,GACFO,GADH,CACQ,SADR,EAEGC,IAFH,CAESC,GAAD,IAAwB;AAC5BN,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAER,UAAU,CAACa,oBAAnB;AAAyCC,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAtD,OAAD,CAAR;AACAT,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEP,WAAW,CAACe,YAApB;AAAkCF,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAA/C,OAAD,CAAR;AACD,KALH,EAMGE,KANH,CAMUC,GAAD,IAAqB;AAC1B,YAAMH,IAAI,GACRG,GAAG,IAAIA,GAAG,CAACC,QAAX,IAAuBD,GAAG,CAACC,QAAJ,CAAaJ,IAApC,GAA2CG,GAAG,CAACC,QAAJ,CAAaJ,IAAxD,GAA+DG,GADjE;AAEAZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAER,UAAU,CAACoB,oBAAnB;AAAyCN,QAAAA,OAAO,EAAEC;AAAlD,OAAD,CAAR;AACD,KAVH;AAWD,GAd8B,EAc5B,CAACT,QAAD,CAd4B,CAA/B;AAgBA,QAAMe,WAAW,GAAGvB,WAAW,CAC5BwB,KAAD,IAAkB;AAChBhB,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER,UAAU,CAACuB,YAAnB;AAAiCT,MAAAA,OAAO,EAAEQ;AAA1C,KAAD,CAAR;AACD,GAH4B,EAI7B,CAAChB,QAAD,CAJ6B,CAA/B;AAOA,QAAMkB,SAAS,GAAG1B,WAAW,CAC3B,CAACiB,IAAD,EAAOU,KAAP,KAAiB;AACfnB,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER,UAAU,CAAC0B,iBAAnB;AAAsCZ,MAAAA,OAAO,EAAEC;AAA/C,KAAD,CAAR;AACAX,IAAAA,aAAa,CAACqB,KAAD,CAAb,CACGE,IADH,CACQ,SADR,EACmBZ,IADnB,EAEGJ,IAFH,CAESC,GAAD,IAAwB;AAC5BN,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAER,UAAU,CAAC4B,mBAAnB;AAAwCd,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAArD,OAAD,CAAR;AACD,KAJH,EAKGE,KALH,CAKUC,GAAD,IAAqB;AAC1B,YAAMH,IAAI,GACRG,GAAG,IAAIA,GAAG,CAACC,QAAX,IAAuBD,GAAG,CAACC,QAAJ,CAAaJ,IAApC,GAA2CG,GAAG,CAACC,QAAJ,CAAaJ,IAAxD,GAA+DG,GADjE;AAEAZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAER,UAAU,CAAC6B,mBAAnB;AAAwCf,QAAAA,OAAO,EAAEC;AAAjD,OAAD,CAAR;AACD,KATH;AAUD,GAb0B,EAc3B,CAACT,QAAD,CAd2B,CAA7B;AAiBA,SAAO;AAAEC,IAAAA,WAAF;AAAec,IAAAA,WAAf;AAA4BG,IAAAA;AAA5B,GAAP;AACD,CA5CM","sourcesContent":["import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport { Grant, GrantTypes } from \"./grantTypes\";\nimport { FilterTypes } from \"../filters/filterTypes\";\nimport { axiosWithOutAuth as axios, axiosWithAuth } from \"../utils/axiosConfig\";\n\nexport const useGrantActions = () => {\n  const dispatch = useDispatch();\n\n  const fetchGrants = useCallback(() => {\n    dispatch({ type: GrantTypes.FETCH_GRANTS_START });\n    // @ts-ignore\n    axios()\n      .get(`/grants`)\n      .then((res: AxiosResponse) => {\n        dispatch({ type: GrantTypes.FETCH_GRANTS_SUCCESS, payload: res.data });\n        dispatch({ type: FilterTypes.FILTER_GRANT, payload: res.data });\n      })\n      .catch((err: AxiosError) => {\n        const data =\n          err && err.response && err.response.data ? err.response.data : err;\n        dispatch({ type: GrantTypes.FETCH_GRANTS_FAILURE, payload: data });\n      });\n  }, [dispatch]);\n\n  const selectGrant = useCallback(\n    (grant: Grant) => {\n      dispatch({ type: GrantTypes.SELECT_GRANT, payload: grant });\n    },\n    [dispatch]\n  );\n\n  const postGrant = useCallback(\n    (data, token) => {\n      dispatch({ type: GrantTypes.POST_GRANTS_START, payload: data });\n      axiosWithAuth(token)\n        .post(\"/grants\", data)\n        .then((res: AxiosResponse) => {\n          dispatch({ type: GrantTypes.POST_GRANTS_SUCCESS, payload: res.data });\n        })\n        .catch((err: AxiosError) => {\n          const data =\n            err && err.response && err.response.data ? err.response.data : err;\n          dispatch({ type: GrantTypes.POST_GRANTS_FAILURE, payload: data });\n        });\n    },\n    [dispatch]\n  );\n\n  return { fetchGrants, selectGrant, postGrant };\n};\n\nexport interface UseGrantActions {\n  fetchGrants: () => void;\n  selectGrant: (grant: Grant) => void;\n  postGrant: (data: Grant) => void;\n}\n"]},"metadata":{},"sourceType":"module"}